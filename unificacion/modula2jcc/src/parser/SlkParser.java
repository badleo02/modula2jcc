package parser;


// SlkParser.java - generated by the SLK parser generator 

public class SlkParser {

private static short get_conditional_production ( short symbol ) { return (short) 0; }

private static short[] Parse = {

0,0,295,24,296,230,4,296,3,1,300,2,238,229,300,230,54,230,300
,22,237,295,300,300,222,300,42,19,42,18,300,42,230,230,221,82,221,44,5
,43,296,296,43,296,21,20,54,296,300,9,9,221,221,295,295,295,295,247,299
,299,56,300,300,300,300,300,300,300,300,299,248,82,82,295,295,295,295,295,295
,295,295,295,295,295,295,295,295,295,295,6,56,197,198,199,200,201,202,203,204
,205,206,207,191,192,193,194,195,196,208,295,295,7,295,295,295,295,295,295,295
,295,295,295,77,75,37,252,75,37,252,250,75,37,249,45,75,46,47,76,38
,75,75,75,251,75,37,170,171,172,75,146,147,148,149,150,151,75,78,174,75
,75,75,175,75,8,75,236,75,152,153,75,155,156,174,10,75,75,235,174,75
,75,75,75,75,75,75,75,75,75,75,75,75,75,134,134,110,257,134,14,290
,13,134,143,144,109,134,109,258,134,34,134,133,134,145,134,16,15,234,95,134
,262,233,303,262,267,35,96,134,33,134,134,134,93,134,95,134,290,134,289,268
,134,303,304,261,286,134,134,132,92,134,134,134,134,134,134,134,134,134,134,134
,134,134,134,161,162,163,164,165,166,167,168,169,23,303,303,303,303,57,25,57
,285,286,57,288,34,34,34,34,34,34,34,34,34,303,303,303,303,303,303,303
,303,303,303,303,303,303,303,303,303,59,57,58,26,57,58,57,57,57,57,57
,287,57,57,57,57,292,57,57,36,303,303,274,303,303,303,303,303,303,303,303
,303,303,69,231,232,60,266,58,58,61,58,62,294,63,58,64,65,293,66,68
,265,273,291,39,40,108,57,57,57,57,57,57,57,57,57,57,57,57,57,57
,57,57,57,57,108,178,179,180,181,182,183,184,185,186,187,188,189,190,67,67
,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,108,108,108,108
,209,210,307,211,212,213,214,215,216,217,218,219,220,282,111,269,108,108,108,108
,108,108,108,108,108,108,108,108,108,108,108,108,160,111,312,270,313,72,41,48
,72,49,311,281,50,269,51,314,52,308,272,176,108,108,74,108,108,108,108,108
,108,108,108,108,108,111,111,111,111,73,271,315,53,72,72,55,72,70,81,83
,72,312,316,114,85,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111
,111,86,114,87,88,317,89,159,159,159,159,159,159,159,159,159,318,90,107,173
,0,111,111,0,111,111,111,111,111,111,111,111,111,111,114,114,114,114,177,177
,177,177,177,177,177,177,177,177,177,177,177,0,117,0,114,114,114,114,114,114
,114,114,114,114,114,114,114,114,114,114,120,117,284,0,0,283,0,0,0,0
,0,0,0,0,0,0,0,0,0,120,114,114,0,114,114,114,114,114,114,114
,114,114,114,117,117,118,119,0,284,284,0,284,0,0,0,284,0,154,0,0
,0,120,120,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,123
,154,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,135,129,117
,117,0,117,117,117,117,117,117,117,117,117,117,0,0,0,0,0,120,120,0
,120,120,120,120,120,120,120,120,120,120,127,128,154,154,154,154,154,154,154,154
,154,136,137,138,139,140,141,142,0,0,130,130,125,125,126,126,126,126,126,126
,126,126,126,124,124,124,0,71,71,0,0,71,0,0,0,0,0,0,0,0
,0,0,71,0,0,71,131,131,0,131,131,131,131,131,131,131,131,131,131,121
,71,71,121,0,71,71,121,71,0,0,121,71,0,0,0,121,226,121,226,121
,0,225,225,0,121,0,226,0,226,0,0,0,0,0,121,121,121,0,121,0
,121,0,121,226,226,121,226,0,0,0,121,121,0,0,121,121,121,121,121,121
,121,121,122,122,122,122,122,122,115,0,0,115,0,0,0,115,0,0,259,115
,0,0,0,243,115,244,115,244,115,0,0,0,0,115,0,244,0,244,260,0
,0,259,0,115,115,115,0,115,259,115,0,115,244,244,115,244,0,0,0,116
,116,0,0,115,115,115,115,115,115,115,116,302,0,0,0,302,0,0,245,302
,246,0,246,302,302,0,302,0,254,0,246,302,246,259,259,259,259,259,259,259
,259,259,0,0,0,0,0,246,246,302,246,254,0,0,0,0,0,0,253,302
,302,0,302,302,302,302,302,302,302,302,302,301,301,301,301,301,301,112,79,0
,112,0,0,0,112,0,0,0,113,0,0,0,0,112,0,112,0,112,0,0
,0,0,112,254,254,254,254,254,254,254,254,254,112,112,112,0,112,0,112,0
,112,0,0,112,27,0,0,0,0,0,0,0,113,113,113,113,113,113,113,32
,27,0,0,27,0,28,0,29,30,0,31,0,31,31,0,0,0,0,0,0
,0,0,0,0,0,0,0,80,80,80,80,80,80,80,80,80,80,80,80,80
,80,80,80,80,80,0,0,0,0,0,0,0,0,0,0,0,157,0,0,27
,27,27,27,27,27,27,27,27,298,0,0,0,298,0,0,157,297,0,0,0
,298,298,223,298,0,0,0,224,298,0,0,0,0,0,0,0,0,0,275,0
,0,223,239,276,240,0,298,157,157,157,157,0,157,0,240,0,240,275,0,298
,297,297,297,297,297,297,297,157,157,157,157,240,240,223,223,223,223,0,309,0
,157,157,157,0,11,0,0,0,0,275,275,275,275,223,223,223,223,309,0,0
,0,0,0,11,0,0,223,223,223,275,275,275,275,0,0,0,0,0,0,0
,84,0,275,275,275,91,0,0,0,309,309,309,309,0,310,11,11,11,11,84
,0,0,0,0,91,0,0,0,0,309,309,309,309,0,0,11,11,11,11,0
,0,94,309,309,309,97,0,0,11,11,11,84,84,84,84,0,91,91,91,91
,94,0,0,0,97,0,0,0,0,98,0,84,84,84,84,0,91,91,91,91
,0,0,0,0,84,84,84,0,98,91,91,91,94,94,94,94,97,97,97,97
,0,0,0,0,0,158,0,0,0,0,0,0,94,94,94,94,97,97,97,97
,98,98,98,98,158,94,94,94,306,97,97,97,263,0,264,0,264,256,0,0
,98,98,98,98,264,0,264,0,0,0,99,305,0,98,98,98,158,158,158,158
,256,264,264,0,264,0,0,255,0,99,12,0,12,0,100,0,158,158,158,158
,12,0,12,0,0,0,0,0,0,158,158,158,0,105,0,0,0,12,12,0
,12,99,99,306,306,306,306,306,306,306,306,306,256,256,256,256,256,256,256,256
,256,99,99,99,99,103,104,17,0,17,0,0,0,0,99,99,99,17,0,17
,0,0,0,0,0,106,106,102,102,0,0,0,0,0,17,17,0,17,101,101
,101,278,0,278,0,0,277,277,0,278,228,278,0,278,0,227,227,0,228,0
,228,0,228,0,280,0,280,0,278,278,0,278,279,242,280,241,280,228,228,0
,0,0,0,241,0,241,0,0,0,0,0,280,280,0,280,0,0,0,0,0
,241,241,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0
};

private static int[] Parse_row = {0

,4,1,31,85,106,156,41,162,1182,1386,184,1443,14,256,2,264
,310,1022,207,307,121,340,339,432,25,36,106,438,429,462,435,437
,471,15,489,57,275,307,495,744,453,120,976,460,32,457,1218,460
,475,475,475,475,485,1223,221,1259,207,1263,1287,1368,1392,517,363,184
,432,973,501,844,570,588,775,657,190,662,147,83,95,635,96,1094
,1323,450,186,60,537,151,469,296,1,311,21,1120,792,1486,2,334
,210,164,6,1140,1509,861,916,47,126,122,926,1355,185,856,216,1350
,339,217,433,463,329,1136,1477,1500,429,588,240,279,195,321,307,1
,1101,4,904,220,1346,411,1176,443,445,480,514
,0};

private static short[] Conflict = {

0
};

private static int[] Conflict_row = {0


,0};

private static short[] Production = {0

,0,2049,2050,0,2049,2051,0,2049,2052,0,2050,46,257,2058,2053,0,2051,46,257,258,2139,2054
,0,2052,2050,259,0,2053,2141,59,2140,257,260,0,2054,2143,2142,59,257,260,261
,0,2055,2145,2135,263,2144,0,2056,2133,2146,264,0,2057,2106,0,2058,258,2084,2060
,0,2059,2062,0,2059,2148,266,0,2059,2077,0,2059,59,2080,0,2060,2149
,0,2061,2062,0,2061,2064,0,2061,2077,0,2061,2079,0,2061,2083,0,2062,2150,267
,0,2063,-1,2106,61,257,0,2064,2151,266,0,2065,-2,2066,61,257
,0,2066,2067,0,2066,2070,0,2066,2071,0,2066,2072,0,2066,2075,0,2066,268
,0,2067,2068,0,2067,2069,2130,0,2067,93,2106,269,2106,91,0,2068,41,2133,40
,0,2069,0,2069,93,2106,269,2106,91,0,2070,2067,271,270,0,2071,2066,271,2152,2067,272
,0,2072,258,2073,273,0,2073,2153,2074,0,2074,0,2074,2066,58,2133
,0,2075,2066,275,274,0,2075,276,0,2075,2154,277,0,2076,2159,41,2158,40
,0,2077,2160,278,0,2078,-4,279,58,2133,-3,0,2079,59,257,2058,59,2080
,0,2080,2161,257,277,0,2081,2164,41,2163,40,0,2082,2126,58,2133,2165
,0,2083,59,257,2058,2168,2167,59,2166,257,260,0,2084,2169,0,2085,2170,2086
,0,2086,0,2086,2087,0,2086,2092,0,2086,2094,0,2086,2096,0,2086,2097
,0,2086,2098,0,2086,2099,0,2086,2100,0,2086,2137,0,2086,2101,0,2086,281
,0,2087,2088,257,0,2088,2089,2090,0,2089,0,2089,2113,282,0,2089,2110
,0,2090,0,2090,2090,93,2111,91,0,2090,2090,2091,46,0,2090,2090,94
,0,2091,257,0,2091,2137,0,2092,258,2093,2085,284,2113,283,0,2093,2172,2171
,0,2094,258,2174,2173,2095,271,2113,287,0,2095,2085,58,2102,0,2096,258,2085,289,2113,288
,0,2097,2113,291,2085,290,0,2098,258,2085,292,0,2099,258,2085,289,2175,2113,275,2113,282,257,293
,0,2100,258,2085,289,2090,257,295,0,2101,2176,296,0,2102,2103,2104
,0,2103,0,2103,2103,2104,44,0,2104,2105,2106,0,2105,0,2105,2106,269
,0,2106,2177,2107,0,2107,2178,2108,2117,0,2108,2179,2109,0,2109,257
,0,2109,2132,0,2109,2127,0,2109,297,0,2109,298,0,2109,41,2106,40
,0,2109,2109,2125,0,2110,41,2180,40,0,2111,2112,2113,0,2112,0,2112,2112,2113,44
,0,2113,2114,2115,0,2114,0,2114,2115,2122,0,2115,2116,2118,2117,0,2116
,0,2116,2118,2123,0,2117,0,2117,43,0,2117,45,0,2118,2119,2120
,0,2119,0,2119,2119,2120,2124,0,2120,2121,257,0,2120,2132,0,2120,2127
,0,2120,125,2128,123,2131,0,2120,297,0,2120,298,0,2120,41,2113,40
,0,2120,2120,2125,0,2120,2138,0,2121,125,2128,123,0,2121,2110,0,2121,2090
,0,2122,61,0,2122,299,0,2122,35,0,2122,60,0,2122,300,0,2122,62
,0,2122,301,0,2122,302,0,2123,43,0,2123,45,0,2123,303,0,2124,42
,0,2124,47,0,2124,304,0,2124,305,0,2124,38,0,2124,306,0,2125,307
,0,2125,126,0,2126,2130,2181,0,2127,308,0,2127,309,0,2128,2183
,0,2129,2184,2106,0,2130,2131,0,2130,257,0,2131,310,0,2131,311
,0,2131,312,0,2131,313,0,2131,314,0,2131,315,0,2131,316,0,2131,317
,0,2131,318,0,2132,319,0,2132,320,0,2132,321,0,2133,2134,257
,0,2134,0,2134,2134,257,44,0,2135,257,0,2135,2136,0,2136,322
,0,2136,323,0,2136,324,0,2136,325,0,2136,326,0,2136,327,0,2136,328
,0,2136,329,0,2136,330,0,2136,331,0,2136,332,0,2136,333,0,2136,334
,0,2137,41,2185,2113,40,335,0,2137,41,2186,2113,40,336,0,2137,41,2113,44,2113,40,337
,0,2137,41,2113,44,2113,40,338,0,2137,41,2113,40,339,0,2137,41,2113,40,340
,0,2137,41,2113,40,324,0,2137,41,2113,44,2113,40,325,0,2137,41,2113,40,326
,0,2137,41,2113,44,2113,40,327,0,2137,41,2113,40,328,0,2137,41,2113,40,329
,0,2137,41,2113,40,330,0,2137,41,2113,40,331,0,2137,41,2113,40,332
,0,2137,41,2187,2113,44,2113,40,333,0,2137,334,0,2137,341,0,2138,41,2113,40,342
,0,2138,41,344,40,343,0,2138,41,2113,40,345,0,2138,41,2113,40,346
,0,2138,41,2113,40,347,0,2138,41,2130,40,348,0,2138,41,2130,40,349
,0,2138,41,2113,40,350,0,2138,41,2113,40,351,0,2138,41,2130,40,352
,0,2138,41,2113,40,353,0,2138,41,2113,44,2130,40,354,0,2139,2139,2059
,0,2139,0,2140,2057,0,2140,0,2141,2141,59,2055,0,2141,0,2142,2142,59,2055
,0,2142,0,2143,59,2056,0,2143,0,2144,257,262,0,2144,0,2145,2145,2135,44
,0,2145,0,2146,265,0,2146,0,2147,2066,61,0,2147,0,2148,2148,59,2147,257
,0,2148,0,2149,2149,2061,0,2149,0,2150,2150,59,2063,0,2150,0,2151,2151,59,2065
,0,2151,0,2152,2152,2067,44,0,2152,0,2153,2153,2074,59,0,2153
,0,2154,2076,0,2154,0,2155,278,0,2155,0,2156,278,0,2156,0,2157,2157,2126,2156,44
,0,2157,0,2158,2157,2126,2155,0,2158,0,2159,2130,58,0,2159,0,2160,2160,2078
,0,2160,0,2161,2081,0,2161,0,2162,2162,2082,59,0,2162,0,2163,2162,2082
,0,2163,0,2164,2130,58,0,2164,0,2165,278,0,2165,0,2166,2106
,0,2166,0,2167,2167,59,2055,0,2167,0,2168,59,2056,0,2168,0,2169,2085,280
,0,2169,0,2170,2170,2086,59,0,2170,0,2171,2171,2085,284,2113,285
,0,2171,0,2172,2085,286,0,2172,0,2173,2173,2095,124,0,2173,0,2174,2085,286
,0,2174,0,2175,2106,294,0,2175,0,2176,2113,0,2176,0,2177,2107,2122
,0,2177,0,2178,2178,2108,2123,0,2178,0,2179,2179,2109,2124,0,2179
,0,2180,2111,0,2180,0,2181,271,272,0,2181,0,2182,2182,2129,44
,0,2182,0,2183,2182,2129,0,2183,0,2184,2106,269,0,2184,0,2185,2113,44
,0,2185,0,2186,2113,44,0,2186,0,2187,2113,44,0,2187
,0};

private static int[] Production_row = {0

,1,4,7,10,16,23,27,34,42,48,53,56,61,64,68,71
,75,78,81,84,87,90,93,97,103,107,113,116,119,122,125,128
,131,134,138,145,150,152,159,164,171,176,180,182,187,192,195,199
,205,209,216,223,228,234,240,251,254,258,260,263,266,269,272,275
,278,281,284,287,290,293,297,301,303,307,310,312,318,323,327,330
,333,341,345,354,359,366,372,377,389,397,401,405,407,412,416,418
,422,426,431,435,438,441,444,447,450,455,459,464,468,470,475,479
,481,485,490,492,496,498,501,504,508,510,515,519,522,525,531,534
,537,542,546,549,554,557,560,563,566,569,572,575,578,581,584,587
,590,593,596,599,602,605,608,611,614,617,621,624,627,630,634,637
,640,643,646,649,652,655,658,661,664,667,670,673,676,680,682,687
,690,693,696,699,702,705,708,711,714,717,720,723,726,729,732,739
,746,754,762,768,774,780,788,794,802,808,814,820,826,832,841,844
,847,853,859,865,871,877,883,889,895,901,907,913,921,925,927,930
,932,937,939,944,946,950,952,956,958,963,965,968,970,974,976,982
,984,988,990,995,997,1002,1004,1009,1011,1016,1018,1021,1023,1026,1028,1031
,1033,1039,1041,1046,1048,1052,1054,1058,1060,1063,1065,1070,1072,1076,1078,1082
,1084,1087,1089,1092,1094,1099,1101,1105,1107,1111,1113,1118,1120,1127,1129,1133
,1135,1140,1142,1146,1148,1152,1154,1157,1159,1163,1165,1170,1172,1177,1179,1182
,1184,1188,1190,1195,1197,1201,1203,1207,1209,1213,1215,1219,1221,1225
,0};

private static short[] Terminal_to_index = {0

,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,59,0,0,70,0,20,21,66,54,10,55,2,67,0,0,0,0,0,0,0,0,0,0,26,6,60,14,62,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,19,36,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,42,57,73,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,1,3,4,5,7,8,9,11,12,13,15,16,18,22,23,24,25,27,28,29,30,31,32,33,34,35,37,38,39,40,41,43
,44,45,46,47,48,49,50,51,52,53,58,61,63,64,65,68,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86
,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118
,119,120,121
};

private static final short   END_OF_SLK_INPUT_ = 355;
private static final short   START_SYMBOL = 2049;

public static final int   NOT_A_SYMBOL = 0;
public static final int   NONTERMINAL_SYMBOL = 1;
public static final int   TERMINAL_SYMBOL = 2;
public static final int   ACTION_SYMBOL = 3;

public static int GetSymbolType ( short   symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0  &&  symbol < START_SYMBOL ) {
       symbol_type = TERMINAL_SYMBOL;
   } else if ( symbol < 0 ) {
       symbol_type = ACTION_SYMBOL;
   }

   return  symbol_type;
}

public static boolean IsNonterminal ( short   symbol )
{
   return ( symbol >= START_SYMBOL );
}

public static boolean IsTerminal ( short   symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

public static boolean IsAction ( short   symbol )
{
   return ( symbol < 0 );
}

public static short GetTerminalIndex ( short   token ){
 return ( Terminal_to_index [token] );
}

private static short
get_predicted_entry ( int        display,
                      SlkToken   tokens,
                      SlkLog     log,
                      short      production_number,
                      short      token,
                      int        scan_level,
                      int        depth )
{
 return  0;
}

public static void
parse ( int         display,
        SlkAction   action,
        SlkToken    tokens,
        SlkError    error,
        SlkLog      log,
        // Tree     tree,
        short       start_symbol )
{
 short     rhs, lhs;
 short     production_number, entry, symbol, token, new_token;
 int       top, index, level;
 short[]   stack = new short[512];

 top = 511;
 stack [ top ] = 0;
 if ( start_symbol == 0 ) {
     start_symbol = START_SYMBOL;
 }
 if ( top > 0 ) { stack [--top] = start_symbol;
 } else { log.trace ("SlkParse: stack overflow\n"); return; }
 //   make_root ( start_symbol );
 token = tokens.get();
 new_token = token;
 if ( display != 0 ) {
     log.trace ( "\n\n\t\tPARSE DERIVATION\n\n" );
 }

 for ( symbol = (stack[top] != 0  ? stack[top++] : (short) 0);  symbol != 0; ) {

     if ( symbol >= START_SYMBOL ) {

         entry = 0;
         level = 1;
         production_number = get_conditional_production ( symbol );
         if ( production_number != 0 ) {
             entry = get_predicted_entry ( display, tokens, log,
                                           production_number, token,
                                           level, 1 );
         }
         if ( entry == 0 ) {
             index = Parse_row [ symbol - (START_SYMBOL-1) ];
             index += Terminal_to_index [ token ];
             entry = Parse [ index ];
         }
         while ( entry < 0 ) {
             index = Conflict_row [-entry];
             index += Terminal_to_index [tokens.peek (level)];
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry != 0 ) {
             index = Production_row [ entry ];
             lhs = Production [ ++index ];
             if ( lhs == symbol ) {
                 rhs = Production [++index];
                 for ( ;  rhs != 0;  rhs = Production [++index] ) {
                     if ( top > 0 ) { stack [--top] = rhs;
                     } else { log.trace ("SlkParse: stack overflow\n"); return; }
                     //   push_rhs_symbol ( rhs );
                 }
                 //   add_rhs ();
                 if ( display != 0 ) {
                     log.trace_production ( entry );
                 }
             } else {
                 new_token = error.no_entry ( symbol, token, level-1 );
             }
         } else {                                       // no table entry
             new_token = error.no_entry ( symbol, token, level-1 );
         }

     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = tokens.get();
             new_token = token;
         } else {
             new_token = error.mismatch ( symbol, token );
         }

     } else {
         if ( display != 0 ) {
             log.trace_action ( symbol );
         }
         action.execute ( -symbol );
     }

     if ( token != new_token ) {
         if ( new_token != 0 ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }

     symbol = (stack[top] != 0  ? stack[top++] : (short) 0);
     //   pop_current ();
 }

 if ( token != END_OF_SLK_INPUT_ ) {
     error.input_left ();
 }

}



};
