package parser;


// SlkParser.java - generated by the SLK parser generator 

public class SlkParser {

private static short get_conditional_production ( short symbol ) { return (short) 0; }

private static short[] Parse = {

0,0,294,24,295,229,4,295,3,1,299,2,266,228,299,229,251,229,299
,251,294,299,299,173,299,22,267,174,237,299,229,229,250,19,81,18,236,173,295
,295,94,295,173,311,5,295,299,95,21,20,310,294,294,294,294,94,298,298,246
,299,299,299,299,299,299,299,299,298,81,81,247,294,294,294,294,294,294,294,294
,294,294,294,294,294,294,294,294,6,311,196,197,198,199,200,201,202,203,204,205
,206,190,191,192,193,194,195,207,294,294,7,294,294,294,294,294,294,294,294,294
,294,76,74,37,109,74,37,9,9,74,37,8,108,74,108,75,38,74,74,74
,10,74,37,142,143,42,74,42,221,14,42,13,74,77,144,74,74,74,220,74
,220,74,23,74,16,15,74,169,170,171,25,74,74,220,220,74,74,74,74,74
,74,74,74,74,74,74,74,74,74,133,133,289,53,133,44,26,43,133,285,43
,92,133,36,133,34,133,132,133,261,133,55,261,151,152,133,91,39,302,271,35
,53,133,33,133,133,133,289,133,288,133,260,133,284,285,133,302,303,270,55,133
,133,131,268,133,133,133,133,133,133,133,133,133,133,133,133,133,133,154,155,230
,231,269,159,235,40,41,302,302,302,302,268,56,249,56,234,248,56,34,34,34
,34,34,34,34,34,34,302,302,302,302,302,302,302,302,302,302,302,302,302,302
,302,302,56,45,46,56,47,56,56,56,56,56,306,56,56,56,56,175,56,56
,233,273,302,302,232,302,302,302,302,302,302,302,302,302,302,158,158,158,158,158
,158,158,158,158,256,58,312,57,293,272,57,287,134,292,257,48,313,307,56,56
,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,68,49,265,59
,291,57,57,60,57,61,286,62,57,63,64,264,65,67,135,136,137,138,139,140
,141,107,176,176,176,176,176,176,176,176,176,176,176,176,176,290,50,208,209,107
,210,211,212,213,214,215,216,217,218,219,51,52,66,66,66,66,66,66,66,66
,66,66,66,66,66,66,66,66,66,66,107,107,107,107,177,178,179,180,181,182
,183,184,185,186,187,188,189,54,258,281,107,107,107,107,107,107,107,107,107,107
,107,107,107,107,107,107,110,259,314,316,258,70,70,69,80,70,258,280,315,317
,82,84,113,85,110,70,107,107,70,107,107,107,107,107,107,107,107,107,107,86
,113,87,70,70,88,89,70,70,106,70,172,0,0,70,0,110,110,110,110,0
,0,258,258,258,258,258,258,258,258,258,0,113,113,113,113,110,110,110,110,110
,110,110,110,110,110,110,110,110,110,110,110,113,113,113,113,113,113,113,113,113
,113,113,113,113,113,113,113,116,0,0,0,110,110,0,110,110,110,110,110,110
,110,110,110,110,119,116,0,113,113,0,113,113,113,113,113,113,113,113,113,113
,0,277,119,277,0,0,276,276,0,277,0,277,0,277,0,0,116,116,117,118
,145,146,147,148,149,150,277,277,0,277,0,0,0,119,119,0,116,116,116,116
,116,116,116,116,116,116,116,116,116,116,116,116,153,119,119,119,119,119,119,119
,119,119,119,119,119,119,119,119,119,122,0,0,116,116,153,116,116,116,116,116
,116,116,116,116,116,0,0,128,27,119,119,0,119,119,119,119,119,119,119,119
,119,119,0,27,0,0,27,0,28,0,29,30,0,31,0,32,0,0,126,127
,0,0,0,0,0,153,153,153,153,153,153,153,153,153,0,0,0,0,129,129
,124,124,125,125,125,125,125,125,125,125,125,123,123,123,0,0,0,0,0,0
,0,27,27,27,27,27,27,27,27,27,0,0,0,283,130,130,282,130,130,130
,130,130,130,130,130,130,130,120,0,0,120,225,0,225,120,0,224,224,120,0
,0,225,120,225,120,0,120,283,283,0,283,120,0,0,283,0,225,225,0,225
,120,120,120,0,120,0,120,0,120,0,0,120,0,0,0,0,120,120,0,0
,120,120,120,120,120,120,120,120,121,121,121,121,121,121,114,0,0,114,238,0
,239,114,253,0,0,114,0,0,0,114,239,114,239,114,0,0,0,0,114,0
,0,0,0,0,253,239,239,114,114,114,252,114,0,114,0,114,0,0,114,0
,0,0,0,115,115,0,0,114,114,114,114,114,114,114,115,301,0,0,242,301
,243,0,243,301,0,0,301,301,0,301,243,0,243,0,301,253,253,253,253,253
,253,253,253,253,0,243,243,0,243,0,0,301,78,0,0,0,0,0,0,0
,0,301,301,0,301,301,301,301,301,301,301,301,301,300,300,300,300,300,300,111
,0,0,111,227,0,0,111,0,226,226,112,227,0,227,111,227,111,0,111,0
,0,0,0,111,0,0,0,0,227,227,0,0,111,111,111,0,111,0,111,0
,111,0,0,111,0,0,0,0,0,0,0,0,112,112,112,112,112,112,112,79
,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,297,0,0
,0,297,0,0,0,296,156,0,297,297,0,297,222,0,0,0,297,223,0,0
,0,0,0,0,156,0,0,0,0,0,222,0,0,297,160,161,162,163,164,165
,166,167,168,0,0,0,297,296,296,296,296,296,296,296,274,156,156,156,156,275
,156,222,222,222,222,0,0,0,0,0,0,0,274,0,0,156,156,156,156,308
,0,222,222,222,222,0,0,0,156,156,156,0,0,0,222,222,222,308,0,0
,0,0,0,274,274,274,274,0,0,0,0,0,0,0,0,0,11,0,0,0
,0,83,0,274,274,274,274,0,308,308,308,308,0,309,11,0,274,274,274,83
,0,0,0,0,0,0,0,0,308,308,308,308,0,0,0,0,0,90,0,0
,0,308,308,308,93,11,11,11,11,0,83,83,83,83,0,90,0,0,0,0
,0,0,93,0,0,11,11,11,11,0,83,83,83,83,0,0,0,0,11,11
,11,96,0,83,83,83,90,90,90,90,0,0,0,93,93,93,93,0,0,96
,0,0,0,0,0,97,90,90,90,90,0,0,0,93,93,93,93,0,0,90
,90,90,0,97,0,0,93,93,93,157,96,96,96,96,0,0,0,0,0,0
,0,0,0,0,255,0,0,157,0,0,96,96,96,96,97,97,97,97,0,0
,0,0,0,96,96,96,255,0,0,305,0,0,254,0,97,97,97,97,157,157
,157,157,0,0,98,0,0,97,97,97,99,304,0,0,0,0,0,0,157,157
,157,157,98,0,12,0,12,0,104,0,0,157,157,157,12,0,12,255,255,255
,255,255,255,255,255,255,0,0,0,12,12,0,12,98,98,0,0,0,0,102
,103,0,305,305,305,305,305,305,305,305,305,0,0,98,98,98,98,0,0,105
,105,101,101,0,0,0,98,98,98,0,0,0,100,100,100,71,0,0,71,0
,0,0,0,0,0,0,0,0,0,0,244,73,245,0,245,0,0,0,0,262
,0,263,245,263,245,72,0,0,0,71,71,263,71,263,0,0,71,245,245,0
,245,0,279,0,279,0,263,263,0,263,278,17,279,17,279,0,0,0,0,0
,0,17,241,17,240,0,0,279,279,0,279,0,240,0,240,0,17,17,0,17
,0,0,0,0,0,0,0,240,240,0,241,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

private static int[] Parse_row = {0

,4,1,37,83,104,123,118,128,1194,1400,135,1527,20,146,2,156
,193,706,202,182,119,194,240,240,143,192,276,275,286,325,375,387
,401,411,190,461,206,269,343,491,488,1471,118,970,458,31,460,1199
,459,459,473,474,475,475,1235,189,1242,30,1279,1303,1382,1388,508,399
,113,484,995,500,870,585,602,803,687,186,337,90,575,141,670,184
,1084,1327,260,1039,83,528,17,315,367,1,310,144,1090,807,999,2
,250,313,261,22,876,1538,936,1488,48,268,13,880,1342,333,466,204
,1497,371,6,240,211,319,1132,617,1518,465,789,194,347,187,376,305
,1,1070,4,928,215,1367,301,1157,33,335,477,478
,0};

private static short[] Conflict = {

0
};

private static int[] Conflict_row = {0


,0};

private static short[] Production = {0

,0,2049,2050,0,2049,2051,0,2049,2052,0,2050,46,257,2058,2053,0,2051,46,257,258,2140,2054
,0,2052,2050,259,0,2053,2142,59,2141,257,260,0,2054,2144,2143,59,257,260,261
,0,2055,2146,2136,263,2145,0,2056,2134,2147,264,0,2057,2107,0,2058,258,2085,2060
,0,2059,2062,0,2059,2149,266,0,2059,2078,0,2059,59,2081,0,2060,2150
,0,2061,2062,0,2061,2064,0,2061,2078,0,2061,2080,0,2061,2084,0,2062,2151,267
,0,2063,-1,2107,61,257,0,2064,2152,266,0,2065,-2,2066,61,257
,0,2066,2067,0,2066,2070,0,2066,2071,0,2066,2072,0,2066,2075,0,2066,2076
,0,2067,2068,0,2067,2069,2131,0,2067,93,2107,268,2107,91,0,2068,41,2134,40
,0,2069,0,2069,93,2107,268,2107,91,0,2070,-3,2067,270,269,0,2071,2066,270,2153,2067,271
,0,2072,258,2073,272,0,2073,2154,2074,0,2074,0,2074,2066,58,2134
,0,2075,-4,2066,274,273,0,2076,2155,275,0,2077,2160,41,2159,40
,0,2078,2161,276,0,2079,-6,277,58,2134,-5,0,2080,59,257,2058,59,2081
,0,2081,2162,257,275,0,2082,2165,41,2164,40,0,2083,2127,58,2134,2166
,0,2084,59,257,2058,2169,2168,59,2167,257,260,0,2085,2170,0,2086,2171,2087
,0,2087,0,2087,2088,0,2087,2093,0,2087,2095,0,2087,2097,0,2087,2098
,0,2087,2099,0,2087,2100,0,2087,2101,0,2087,2138,0,2087,2102,0,2087,279
,0,2088,2089,257,0,2089,2090,2091,0,2090,0,2090,2114,280,0,2090,2111
,0,2091,0,2091,2091,93,2112,91,0,2091,2091,2092,46,0,2091,2091,94
,0,2092,257,0,2092,2138,0,2093,258,2094,2086,282,2114,281,0,2094,2173,2172
,0,2095,258,2175,2174,2096,270,2114,285,0,2096,2086,58,2103,0,2097,258,2086,287,2114,286
,0,2098,2114,289,2086,288,0,2099,258,2086,290,0,2100,258,2086,287,2176,2114,274,2114,280,257,291
,0,2101,258,2086,287,2091,257,293,0,2102,2177,294,0,2103,2104,2105
,0,2104,0,2104,2104,2105,44,0,2105,2106,2107,0,2106,0,2106,2107,268
,0,2107,2178,2108,0,2108,2179,2109,2118,0,2109,2180,2110,0,2110,257
,0,2110,2133,0,2110,2128,0,2110,295,0,2110,296,0,2110,41,2107,40
,0,2110,2110,2126,0,2111,41,2181,40,0,2112,2113,2114,0,2113,0,2113,2113,2114,44
,0,2114,2115,2116,0,2115,0,2115,2116,2123,0,2116,2117,2119,2118,0,2117
,0,2117,2119,2124,0,2118,0,2118,43,0,2118,45,0,2119,2120,2121
,0,2120,0,2120,2120,2121,2125,0,2121,2122,257,0,2121,2133,0,2121,2128
,0,2121,125,2129,123,2132,0,2121,295,0,2121,296,0,2121,41,2114,40
,0,2121,2121,2126,0,2121,2139,0,2122,125,2129,123,0,2122,2111,0,2122,2091
,0,2123,61,0,2123,297,0,2123,35,0,2123,60,0,2123,298,0,2123,62
,0,2123,299,0,2123,300,0,2124,43,0,2124,45,0,2124,301,0,2125,42
,0,2125,47,0,2125,302,0,2125,303,0,2125,38,0,2125,304,0,2126,305
,0,2126,126,0,2127,2131,2182,0,2128,306,0,2128,307,0,2129,2184
,0,2130,2185,2107,0,2131,2132,0,2131,257,0,2132,308,0,2132,309
,0,2132,310,0,2132,311,0,2132,312,0,2132,313,0,2132,314,0,2132,315
,0,2132,316,0,2133,317,0,2133,318,0,2133,319,0,2134,2135,257
,0,2135,0,2135,2135,257,44,0,2136,257,0,2136,2137,0,2137,320
,0,2137,321,0,2137,322,0,2137,323,0,2137,324,0,2137,325,0,2137,326
,0,2137,327,0,2137,328,0,2137,329,0,2137,330,0,2137,331,0,2137,332
,0,2138,41,2186,2114,40,333,0,2138,41,2187,2114,40,334,0,2138,41,2114,44,2114,40,335
,0,2138,41,2114,44,2114,40,336,0,2138,41,2114,40,337,0,2138,41,2114,40,338
,0,2138,41,2114,40,322,0,2138,41,2114,44,2114,40,323,0,2138,41,2114,40,324
,0,2138,41,2114,44,2114,40,325,0,2138,41,2114,40,326,0,2138,41,2114,40,327
,0,2138,41,2114,40,328,0,2138,41,2114,40,329,0,2138,41,2114,40,330
,0,2138,41,2188,2114,44,2114,40,331,0,2138,332,0,2138,339,0,2139,41,2114,40,340
,0,2139,41,342,40,341,0,2139,41,2114,40,343,0,2139,41,2114,40,344
,0,2139,41,2114,40,345,0,2139,41,2131,40,346,0,2139,41,2131,40,347
,0,2139,41,2114,40,348,0,2139,41,2114,40,349,0,2139,41,2131,40,350
,0,2139,41,2114,40,351,0,2139,41,2114,44,2131,40,352,0,2140,2140,2059
,0,2140,0,2141,2057,0,2141,0,2142,2142,59,2055,0,2142,0,2143,2143,59,2055
,0,2143,0,2144,59,2056,0,2144,0,2145,257,262,0,2145,0,2146,2146,2136,44
,0,2146,0,2147,265,0,2147,0,2148,2066,61,0,2148,0,2149,2149,59,2148,257
,0,2149,0,2150,2150,2061,0,2150,0,2151,2151,59,2063,0,2151,0,2152,2152,59,2065
,0,2152,0,2153,2153,2067,44,0,2153,0,2154,2154,2074,59,0,2154
,0,2155,2077,0,2155,0,2156,276,0,2156,0,2157,276,0,2157,0,2158,2158,2127,2157,44
,0,2158,0,2159,2158,2127,2156,0,2159,0,2160,2131,58,0,2160,0,2161,2161,2079
,0,2161,0,2162,2082,0,2162,0,2163,2163,2083,59,0,2163,0,2164,2163,2083
,0,2164,0,2165,2131,58,0,2165,0,2166,276,0,2166,0,2167,2107
,0,2167,0,2168,2168,59,2055,0,2168,0,2169,59,2056,0,2169,0,2170,2086,278
,0,2170,0,2171,2171,2087,59,0,2171,0,2172,2172,2086,282,2114,283
,0,2172,0,2173,2086,284,0,2173,0,2174,2174,2096,124,0,2174,0,2175,2086,284
,0,2175,0,2176,2107,292,0,2176,0,2177,2114,0,2177,0,2178,2108,2123
,0,2178,0,2179,2179,2109,2124,0,2179,0,2180,2180,2110,2125,0,2180
,0,2181,2112,0,2181,0,2182,270,271,0,2182,0,2183,2183,2130,44
,0,2183,0,2184,2183,2130,0,2184,0,2185,2107,268,0,2185,0,2186,2114,44
,0,2186,0,2187,2114,44,0,2187,0,2188,2114,44,0,2188
,0};

private static int[] Production_row = {0

,1,4,7,10,16,23,27,34,42,48,53,56,61,64,68,71
,75,78,81,84,87,90,93,97,103,107,113,116,119,122,125,128
,131,134,138,145,150,152,159,165,172,177,181,183,188,194,198,204
,208,215,222,227,233,239,250,253,257,259,262,265,268,271,274,277
,280,283,286,289,292,296,300,302,306,309,311,317,322,326,329,332
,340,344,353,358,365,371,376,388,396,400,404,406,411,415,417,421
,425,430,434,437,440,443,446,449,454,458,463,467,469,474,478,480
,484,489,491,495,497,500,503,507,509,514,518,521,524,530,533,536
,541,545,548,553,556,559,562,565,568,571,574,577,580,583,586,589
,592,595,598,601,604,607,610,613,616,620,623,626,629,633,636,639
,642,645,648,651,654,657,660,663,666,669,672,675,679,681,686,689
,692,695,698,701,704,707,710,713,716,719,722,725,728,731,738,745
,753,761,767,773,779,787,793,801,807,813,819,825,831,840,843,846
,852,858,864,870,876,882,888,894,900,906,912,920,924,926,929,931
,936,938,943,945,949,951,955,957,962,964,967,969,973,975,981,983
,987,989,994,996,1001,1003,1008,1010,1015,1017,1020,1022,1025,1027,1030,1032
,1038,1040,1045,1047,1051,1053,1057,1059,1062,1064,1069,1071,1075,1077,1081,1083
,1086,1088,1091,1093,1098,1100,1104,1106,1110,1112,1117,1119,1126,1128,1132,1134
,1139,1141,1145,1147,1151,1153,1156,1158,1162,1164,1169,1171,1176,1178,1181,1183
,1187,1189,1194,1196,1200,1202,1206,1208,1212,1214,1218,1220,1224
,0};

private static short[] Terminal_to_index = {0

,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,57,0,0,68,0,19,20,64,52,10,53,2,65,0,0,0,0,0,0,0,0,0,0,25,6,58,14,60,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,18,34,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,40,55,71,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,1,3,4,5,7,8,9,11,12,13,15,17,21,22,23,24,26,27,28,29,30,31,32,33,35,36,37,38,39,41,42,43
,44,45,46,47,48,49,50,51,56,59,61,62,63,66,67,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86
,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118
,119
};

private static final short   END_OF_SLK_INPUT_ = 353;
private static final short   START_SYMBOL = 2049;

public static final int   NOT_A_SYMBOL = 0;
public static final int   NONTERMINAL_SYMBOL = 1;
public static final int   TERMINAL_SYMBOL = 2;
public static final int   ACTION_SYMBOL = 3;

public static int GetSymbolType ( short   symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0  &&  symbol < START_SYMBOL ) {
       symbol_type = TERMINAL_SYMBOL;
   } else if ( symbol < 0 ) {
       symbol_type = ACTION_SYMBOL;
   }

   return  symbol_type;
}

public static boolean IsNonterminal ( short   symbol )
{
   return ( symbol >= START_SYMBOL );
}

public static boolean IsTerminal ( short   symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

public static boolean IsAction ( short   symbol )
{
   return ( symbol < 0 );
}

public static short GetTerminalIndex ( short   token ){
 return ( Terminal_to_index [token] );
}

private static short
get_predicted_entry ( int        display,
                      SlkToken   tokens,
                      SlkLog     log,
                      short      production_number,
                      short      token,
                      int        scan_level,
                      int        depth )
{
 return  0;
}

public static void
parse ( int         display,
        SlkAction   action,
        SlkToken    tokens,
        SlkError    error,
        SlkLog      log,
        // Tree     tree,
        short       start_symbol )
{
 short     rhs, lhs;
 short     production_number, entry, symbol, token, new_token;
 int       top, index, level;
 short[]   stack = new short[512];

 top = 511;
 stack [ top ] = 0;
 if ( start_symbol == 0 ) {
     start_symbol = START_SYMBOL;
 }
 if ( top > 0 ) { stack [--top] = start_symbol;
 } else { log.trace ("SlkParse: stack overflow\n"); return; }
 //   make_root ( start_symbol );
 token = tokens.get();
 new_token = token;
 if ( display != 0 ) {
     log.trace ( "\n\n\t\tPARSE DERIVATION\n\n" );
 }

 for ( symbol = (stack[top] != 0  ? stack[top++] : (short) 0);  symbol != 0; ) {

     if ( symbol >= START_SYMBOL ) {

         entry = 0;
         level = 1;
         production_number = get_conditional_production ( symbol );
         if ( production_number != 0 ) {
             entry = get_predicted_entry ( display, tokens, log,
                                           production_number, token,
                                           level, 1 );
         }
         if ( entry == 0 ) {
             index = Parse_row [ symbol - (START_SYMBOL-1) ];
             index += Terminal_to_index [ token ];
             entry = Parse [ index ];
         }
         while ( entry < 0 ) {
             index = Conflict_row [-entry];
             index += Terminal_to_index [tokens.peek (level)];
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry != 0 ) {
             index = Production_row [ entry ];
             lhs = Production [ ++index ];
             if ( lhs == symbol ) {
                 rhs = Production [++index];
                 for ( ;  rhs != 0;  rhs = Production [++index] ) {
                     if ( top > 0 ) { stack [--top] = rhs;
                     } else { log.trace ("SlkParse: stack overflow\n"); return; }
                     //   push_rhs_symbol ( rhs );
                 }
                 //   add_rhs ();
                 if ( display != 0 ) {
                     log.trace_production ( entry );
                 }
             } else {
                 new_token = error.no_entry ( symbol, token, level-1 );
             }
         } else {                                       // no table entry
             new_token = error.no_entry ( symbol, token, level-1 );
         }

     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = tokens.get();
             new_token = token;
         } else {
             new_token = error.mismatch ( symbol, token );
         }

     } else {
         if ( display != 0 ) {
             log.trace_action ( symbol );
         }
         action.execute ( -symbol );
     }

     if ( token != new_token ) {
         if ( new_token != 0 ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }

     symbol = (stack[top] != 0  ? stack[top++] : (short) 0);
     //   pop_current ();
 }

 if ( token != END_OF_SLK_INPUT_ ) {
     error.input_left ();
 }

}



};
