
// SlkKeywords.txt - generated by the SLK parser generator 

// Assumes all alpha terminals are keywords, usually needs manual editing to remove non-keywords.

public class SlkKeywords {

public static String[] name = {

 "Identificador"
,"END"
,"IMPLEMENTATION"
,"MODULE"
,"DEFINITION"
,"FROM"
,"IMPORT"
,"EXPORT"
,"QUALIFIED"
,"TYPE"
,"CONST"
,"TipoSubprograma"
,"SET"
,"OF"
,"ARRAY"
,"RECORD"
,"POINTER"
,"TO"
,"TipoSubprograma:"
,"PROCEDURE"
,"VAR"
,"BEGIN"
,"EXIT"
,"IF"
,"THEN"
,"ELSIF"
,"ELSE"
,"CASE"
,"WHILE"
,"DO"
,"REPEAT"
,"UNTIL"
,"LOOP"
,"FOR"
,"BY"
,"WITH"
,"RETURN"
,"Cadena"
,"Caracter"
,"IN"
,"OR"
,"DIV"
,"MOD"
,"AND"
,"NOT"
,"NumeroEntero"
,"NumeroReal"
,"BITSET"
,"BOOLEAN"
,"CARDINAL"
,"CHAR"
,"INTEGER"
,"LONGINT"
,"LONGREAL"
,"PROC"
,"REAL"
,"TRUE"
,"FALSE"
,"NIL"
,"ALLOCATE"
,"DEALLOCATE"
,"ReadInt"
,"WriteInt"
,"ReadCard"
,"WriteCard"
,"ReadChar"
,"WriteChar"
,"ReadString"
,"WriteString"
,"ReadReal"
,"WriteReal"
,"WriteLn"
,"DEC"
,"INC"
,"INCL"
,"EXCL"
,"NEW"
,"DISPOSE"
,"HALT"
,"ABS"
,"CAP"
,"ParametroChar"
,"CHR"
,"FLOAT"
,"HIGH"
,"MAX"
,"MIN"
,"ODD"
,"ORD"
,"SIZE"
,"TRUNC"
,"VAL"
}; 

public static short[] token = {

 SlkConstants.IDENTIFICADOR_ 
,SlkConstants.END_ 
,SlkConstants.IMPLEMENTATION_ 
,SlkConstants.MODULE_ 
,SlkConstants.DEFINITION_ 
,SlkConstants.FROM_ 
,SlkConstants.IMPORT_ 
,SlkConstants.EXPORT_ 
,SlkConstants.QUALIFIED_ 
,SlkConstants.TYPE_ 
,SlkConstants.CONST_ 
,SlkConstants.TIPOSUBPROGRAMA_ 
,SlkConstants.SET_ 
,SlkConstants.OF_ 
,SlkConstants.ARRAY_ 
,SlkConstants.RECORD_ 
,SlkConstants.POINTER_ 
,SlkConstants.TO_ 
,SlkConstants.TIPOSUBPROGRAMACOLON_ 
,SlkConstants.PROCEDURE_ 
,SlkConstants.VAR_ 
,SlkConstants.BEGIN_ 
,SlkConstants.EXIT_ 
,SlkConstants.IF_ 
,SlkConstants.THEN_ 
,SlkConstants.ELSIF_ 
,SlkConstants.ELSE_ 
,SlkConstants.CASE_ 
,SlkConstants.WHILE_ 
,SlkConstants.DO_ 
,SlkConstants.REPEAT_ 
,SlkConstants.UNTIL_ 
,SlkConstants.LOOP_ 
,SlkConstants.FOR_ 
,SlkConstants.BY_ 
,SlkConstants.WITH_ 
,SlkConstants.RETURN_ 
,SlkConstants.CADENA_ 
,SlkConstants.CARACTER_ 
,SlkConstants.IN_ 
,SlkConstants.OR_ 
,SlkConstants.DIV_ 
,SlkConstants.MOD_ 
,SlkConstants.AND_ 
,SlkConstants.NOT_ 
,SlkConstants.NUMEROENTERO_ 
,SlkConstants.NUMEROREAL_ 
,SlkConstants.BITSET_ 
,SlkConstants.BOOLEAN_ 
,SlkConstants.CARDINAL_ 
,SlkConstants.CHAR_ 
,SlkConstants.INTEGER_ 
,SlkConstants.LONGINT_ 
,SlkConstants.LONGREAL_ 
,SlkConstants.PROC_ 
,SlkConstants.REAL_ 
,SlkConstants.TRUE_ 
,SlkConstants.FALSE_ 
,SlkConstants.NIL_ 
,SlkConstants.ALLOCATE_ 
,SlkConstants.DEALLOCATE_ 
,SlkConstants.READINT_ 
,SlkConstants.WRITEINT_ 
,SlkConstants.READCARD_ 
,SlkConstants.WRITECARD_ 
,SlkConstants.READCHAR_ 
,SlkConstants.WRITECHAR_ 
,SlkConstants.READSTRING_ 
,SlkConstants.WRITESTRING_ 
,SlkConstants.READREAL_ 
,SlkConstants.WRITEREAL_ 
,SlkConstants.WRITELN_ 
,SlkConstants.DEC_ 
,SlkConstants.INC_ 
,SlkConstants.INCL_ 
,SlkConstants.EXCL_ 
,SlkConstants.NEW_ 
,SlkConstants.DISPOSE_ 
,SlkConstants.HALT_ 
,SlkConstants.ABS_ 
,SlkConstants.CAP_ 
,SlkConstants.PARAMETROCHAR_ 
,SlkConstants.CHR_ 
,SlkConstants.FLOAT_ 
,SlkConstants.HIGH_ 
,SlkConstants.MAX_ 
,SlkConstants.MIN_ 
,SlkConstants.ODD_ 
,SlkConstants.ORD_ 
,SlkConstants.SIZE_ 
,SlkConstants.TRUNC_ 
,SlkConstants.VAL_ 
}; 

}; 

