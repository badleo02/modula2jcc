/* The following code was generated by JFlex 1.4.2 on 20/03/09 15:37 */
package scanner;

import tabla_de_simbolos.*;
import gestor_de_errores.*;
import java.io.Reader;
import java.util.ArrayList;

/* Declaraciones */
/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 20/03/09 15:37 from the specification file
 * <tt>scanner.flex</tt>
 */
public class Scanner {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;
    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;
    /** lexical states */
    public static final int NUMERO_ENTERO = 6;
    public static final int NUMERO_OCTAL = 14;
    public static final int CARACTER_EN_OCTAL = 10;
    public static final int NUMERO_REAL = 8;
    public static final int NUMERO_HEXADECIMAL = 12;
    public static final int YYINITIAL = 0;
    public static final int SUMIDERO = 16;
    public static final int COMENTARIO = 2;
    public static final int IDENTIFICADOR = 4;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
        8, 8
    };
    /** 
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = {
        12, 12, 12, 12, 12, 12, 12, 12, 14, 13, 17, 0, 0, 17, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0,
        13, 0, 16, 43, 11, 0, 35, 18, 23, 25, 19, 6, 24, 7, 4, 20,
        3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 29, 28, 21, 30, 22, 0,
        0, 36, 8, 9, 38, 5, 1, 47, 10, 39, 11, 11, 48, 41, 37, 42,
        50, 11, 44, 49, 45, 51, 40, 11, 11, 11, 11, 26, 15, 27, 31, 11,
        0, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 33, 32, 34, 46, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        0, 0, 11, 11, 11, 11, 0, 0, 0, 0, 11, 0, 0, 12, 0, 0,
        0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 0, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 52, 11, 11, 11, 11, 11, 0, 11, 11, 11, 11, 11, 11, 11, 11
    };
    /** 
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ACTION_PACKED_0 =
            "\11\0\1\1\1\2\2\3\1\4\1\2\1\5\1\6" +
            "\2\2\1\7\2\10\1\11\1\12\1\13\1\14\1\15" +
            "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
            "\1\26\1\27\1\30\1\31\6\2\1\32\2\2\1\33" +
            "\2\2\3\7\1\34\1\35\1\36\1\37\1\40\1\41" +
            "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
            "\1\2\1\0\1\3\1\0\1\3\1\52\1\53\1\54" +
            "\4\2\1\10\1\55\1\10\1\56\1\57\1\60\1\61" +
            "\1\62\4\2\1\63\1\2\1\64\4\2\1\65\1\66" +
            "\1\2\1\67\1\70\4\2\1\10\1\55\1\0\1\10" +
            "\1\0\1\55\1\71\1\72\1\73\1\74\1\2\1\75" +
            "\5\2\1\0\2\2\1\76\2\2\1\77\1\100\1\2" +
            "\1\101\1\102\1\70\1\0\6\2\1\103\5\2\1\104" +
            "\1\2\1\105\1\106\1\2\1\107\1\110";

    private static int[] zzUnpackAction() {
        int[] result = new int[157];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }
    /** 
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173" +
            "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u01dd" +
            "\0\u01dd\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u01dd\0\u01dd" +
            "\0\u0424\0\u0459\0\u048e\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u01dd" +
            "\0\u04c3\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u04f8" +
            "\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u01dd\0\u0636\0\u066b" +
            "\0\u01dd\0\u06a0\0\u06d5\0\u01dd\0\u070a\0\u073f\0\u01dd\0\u01dd" +
            "\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u01dd" +
            "\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u0774\0\u07a9\0\u07de\0\u0813" +
            "\0\u0848\0\u07a9\0\u07a9\0\u01dd\0\u087d\0\u08b2\0\u08e7\0\u091c" +
            "\0\u0951\0\u01dd\0\u0986\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u01dd" +
            "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u02e6\0\u0af9" +
            "\0\u0b2e\0\u0b63\0\u0b98\0\u01dd\0\u01dd\0\u0bcd\0\u01dd\0\u0c02" +
            "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u03ba\0\u0d40\0\u0d75" +
            "\0\u0daa\0\u03ef\0\u02e6\0\u02e6\0\u02e6\0\u02e6\0\u0ddf\0\u02e6" +
            "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87" +
            "\0\u02e6\0\u0fbc\0\u0ff1\0\u02e6\0\u02e6\0\u1026\0\u02e6\0\u02e6" +
            "\0\u105b\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199" +
            "\0\u02e6\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u02e6\0\u12d7" +
            "\0\u02e6\0\u02e6\0\u130c\0\u02e6\0\u02e6";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[157];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }
    /** 
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
            "\1\22\1\23\2\17\1\12\2\24\1\12\1\25\1\24" +
            "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35" +
            "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45" +
            "\1\46\1\47\1\50\1\51\1\52\1\53\1\17\1\54" +
            "\1\55\1\56\1\57\1\60\1\61\1\17\1\62\1\17" +
            "\1\63\2\17\23\64\1\65\3\64\1\66\35\64\1\67" +
            "\3\12\1\70\1\12\2\70\4\12\1\67\2\70\1\67" +
            "\21\70\3\67\7\12\1\67\2\12\1\67\5\12\1\67" +
            "\2\71\2\12\1\72\1\71\2\72\5\71\2\72\1\71" +
            "\21\72\24\71\4\73\1\74\1\73\2\74\5\73\2\74" +
            "\1\73\21\74\24\73\4\75\1\76\1\75\2\76\5\75" +
            "\2\76\1\75\21\76\24\75\4\77\1\100\1\77\2\100" +
            "\5\77\2\100\1\77\21\100\24\77\4\101\1\102\1\101" +
            "\2\102\5\101\2\102\1\101\21\102\24\101\4\103\1\104" +
            "\1\103\2\104\5\103\2\104\1\103\21\104\24\103\66\0" +
            "\3\17\1\0\1\17\2\0\5\17\1\0\1\17\25\0" +
            "\1\105\6\17\1\0\2\17\1\0\6\17\1\0\1\106" +
            "\2\107\1\110\1\106\2\0\2\106\32\0\1\106\1\0" +
            "\1\106\17\0\1\106\1\107\1\111\1\110\1\106\2\0" +
            "\1\112\1\113\32\0\1\106\1\0\1\106\22\0\1\114" +
            "\61\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\2\17\1\0\6\17\1\0\3\17" +
            "\1\0\1\17\2\0\5\17\1\0\1\17\25\0\3\17" +
            "\1\115\2\17\1\116\1\0\2\17\1\0\6\17\1\0" +
            "\3\17\1\0\1\17\2\0\2\17\1\117\2\17\1\0" +
            "\1\17\25\0\1\120\6\17\1\0\2\17\1\0\6\17" +
            "\15\0\2\24\2\0\1\24\43\0\17\25\1\121\1\122" +
            "\1\0\43\25\17\26\1\123\1\26\1\0\1\122\42\26" +
            "\26\0\1\124\7\0\1\125\64\0\1\126\51\0\1\127" +
            "\77\0\1\130\27\0\3\17\1\0\1\17\2\0\5\17" +
            "\1\0\1\17\25\0\1\17\1\131\5\17\1\0\2\17" +
            "\1\0\6\17\1\0\3\17\1\0\1\17\2\0\5\17" +
            "\1\0\1\17\25\0\3\17\1\132\2\17\1\133\1\0" +
            "\2\17\1\0\6\17\1\0\3\17\1\0\1\17\2\0" +
            "\5\17\1\0\1\17\25\0\3\17\1\134\3\17\1\0" +
            "\2\17\1\0\6\17\1\0\3\17\1\0\1\17\2\0" +
            "\5\17\1\0\1\17\25\0\1\17\1\135\5\17\1\0" +
            "\2\17\1\0\6\17\1\0\3\17\1\0\1\17\2\0" +
            "\5\17\1\0\1\17\25\0\6\17\1\136\1\0\2\17" +
            "\1\0\6\17\1\0\3\17\1\0\1\17\2\0\5\17" +
            "\1\0\1\17\25\0\7\17\1\0\1\137\1\17\1\0" +
            "\6\17\1\0\3\17\1\0\1\140\2\0\5\17\1\0" +
            "\1\17\25\0\7\17\1\0\2\17\1\0\6\17\1\0" +
            "\3\17\1\0\1\17\2\0\5\17\1\0\1\17\25\0" +
            "\7\17\1\0\1\141\1\17\1\0\6\17\1\0\3\17" +
            "\1\0\1\17\2\0\5\17\1\0\1\17\25\0\6\17" +
            "\1\142\1\0\2\17\1\0\6\17\1\0\3\17\1\0" +
            "\1\17\2\0\5\17\1\0\1\17\25\0\7\17\1\0" +
            "\1\143\1\17\1\0\6\17\31\0\1\144\56\0\1\145" +
            "\42\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\2\17\1\0\1\17\1\146\4\17" +
            "\1\0\3\106\1\0\1\106\2\0\2\106\1\147\31\0" +
            "\1\106\1\0\1\106\17\0\1\106\2\107\1\110\1\106" +
            "\2\0\2\106\1\147\31\0\1\106\1\0\1\106\20\0" +
            "\2\150\62\0\1\106\1\107\1\111\1\110\1\106\2\0" +
            "\1\112\1\113\1\147\31\0\1\106\1\0\1\106\17\0" +
            "\3\17\1\0\1\17\2\0\5\17\1\0\1\17\25\0" +
            "\7\17\1\0\1\17\1\151\1\0\6\17\1\0\3\17" +
            "\1\0\1\17\2\0\5\17\1\0\1\17\25\0\6\17" +
            "\1\152\1\0\2\17\1\0\6\17\1\0\3\17\1\0" +
            "\1\17\2\0\5\17\1\0\1\17\25\0\1\153\6\17" +
            "\1\0\2\17\1\0\6\17\1\0\3\17\1\0\1\17" +
            "\2\0\5\17\1\0\1\17\25\0\7\17\1\0\1\154" +
            "\1\17\1\0\6\17\15\25\2\155\1\121\1\156\1\157" +
            "\43\25\15\26\2\160\1\123\1\26\1\161\1\162\42\26" +
            "\1\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\2\17\1\163\4\17\1\0\2\17\1\0\6\17" +
            "\1\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\2\17\1\0\1\17\1\164\4\17" +
            "\1\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\1\17\1\165\1\0\6\17\1\0" +
            "\3\17\1\0\1\17\2\0\5\17\1\0\1\17\25\0" +
            "\4\17\1\166\2\17\1\0\2\17\1\0\6\17\1\0" +
            "\3\17\1\0\1\17\2\0\5\17\1\0\1\17\25\0" +
            "\7\17\1\0\1\17\1\167\1\0\6\17\1\0\3\17" +
            "\1\0\1\17\2\0\5\17\1\0\1\17\25\0\2\17" +
            "\1\170\4\17\1\0\2\17\1\0\6\17\1\0\3\17" +
            "\1\0\1\17\2\0\5\17\1\0\1\17\25\0\1\171" +
            "\6\17\1\0\2\17\1\0\6\17\1\0\3\17\1\0" +
            "\1\17\2\0\5\17\1\0\1\17\25\0\7\17\1\0" +
            "\2\17\1\0\4\17\1\172\1\17\1\0\3\17\1\0" +
            "\1\17\2\0\5\17\1\0\1\17\25\0\1\17\1\173" +
            "\5\17\1\0\2\17\1\0\6\17\1\0\3\17\1\0" +
            "\1\17\2\0\5\17\1\0\1\17\25\0\6\17\1\174" +
            "\1\0\2\17\1\0\6\17\1\0\3\17\1\0\1\17" +
            "\2\0\5\17\1\0\1\17\25\0\7\17\1\0\2\17" +
            "\1\0\2\17\1\175\3\17\2\0\2\150\1\0\1\176" +
            "\60\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\2\17\1\0\2\17\1\177\3\17" +
            "\1\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\2\17\1\0\1\17\1\200\4\17" +
            "\1\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\1\201\1\17\1\0\6\17\1\0" +
            "\3\17\1\0\1\17\2\0\5\17\1\0\1\17\25\0" +
            "\2\17\1\202\4\17\1\0\2\17\1\0\6\17\15\25" +
            "\2\155\1\121\1\122\1\157\43\25\15\0\2\157\1\25" +
            "\1\0\1\157\43\0\15\26\2\160\1\123\1\26\1\161" +
            "\1\122\42\26\15\0\2\161\1\26\1\0\1\161\44\0" +
            "\3\17\1\0\1\203\2\0\5\17\1\0\1\17\25\0" +
            "\7\17\1\0\2\17\1\0\6\17\1\0\3\17\1\0" +
            "\1\17\2\0\5\17\1\0\1\17\25\0\7\17\1\0" +
            "\2\17\1\0\1\17\1\204\4\17\1\0\3\17\1\0" +
            "\1\205\2\0\5\17\1\0\1\17\25\0\7\17\1\0" +
            "\2\17\1\0\6\17\1\0\3\17\1\0\1\17\2\0" +
            "\5\17\1\0\1\17\25\0\7\17\1\0\2\17\1\0" +
            "\1\206\5\17\1\0\3\17\1\0\1\17\2\0\1\17" +
            "\1\207\3\17\1\0\1\17\25\0\7\17\1\0\2\17" +
            "\1\0\6\17\1\0\3\17\1\0\1\210\2\0\5\17" +
            "\1\0\1\17\25\0\7\17\1\0\2\17\1\0\6\17" +
            "\2\0\2\211\2\0\2\212\56\0\3\17\1\0\1\213" +
            "\2\0\5\17\1\0\1\17\25\0\7\17\1\0\2\17" +
            "\1\0\6\17\1\0\3\17\1\0\1\214\2\0\5\17" +
            "\1\0\1\17\25\0\7\17\1\0\2\17\1\0\6\17" +
            "\1\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\3\17\1\215\3\17\1\0\2\17\1\0\6\17" +
            "\1\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\2\17\1\0\1\216\5\17\1\0" +
            "\3\17\1\0\1\17\2\0\5\17\1\0\1\17\25\0" +
            "\3\17\1\217\3\17\1\0\1\220\1\17\1\0\6\17" +
            "\2\0\2\211\62\0\3\17\1\0\1\17\2\0\5\17" +
            "\1\0\1\17\25\0\7\17\1\0\1\17\1\221\1\0" +
            "\6\17\1\0\3\17\1\0\1\17\2\0\5\17\1\0" +
            "\1\17\25\0\1\222\6\17\1\0\2\17\1\0\6\17" +
            "\1\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\1\17\1\223\5\17\1\0\2\17\1\0\6\17" +
            "\1\0\3\17\1\0\1\224\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\2\17\1\0\6\17\1\0\3\17" +
            "\1\0\1\17\2\0\5\17\1\0\1\17\25\0\1\17" +
            "\1\225\5\17\1\0\2\17\1\0\6\17\1\0\3\17" +
            "\1\0\1\226\2\0\5\17\1\0\1\17\25\0\7\17" +
            "\1\0\2\17\1\0\6\17\1\0\3\17\1\0\1\17" +
            "\2\0\5\17\1\0\1\17\25\0\1\17\1\227\5\17" +
            "\1\0\2\17\1\0\6\17\1\0\3\17\1\0\1\17" +
            "\2\0\5\17\1\0\1\17\25\0\1\230\6\17\1\0" +
            "\2\17\1\0\6\17\1\0\3\17\1\0\1\17\2\0" +
            "\5\17\1\0\1\17\25\0\7\17\1\0\1\231\1\17" +
            "\1\0\6\17\1\0\3\17\1\0\1\17\2\0\5\17" +
            "\1\0\1\17\25\0\7\17\1\0\1\17\1\232\1\0" +
            "\6\17\1\0\3\17\1\0\1\17\2\0\5\17\1\0" +
            "\1\17\25\0\1\233\6\17\1\0\2\17\1\0\6\17" +
            "\1\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\2\17\1\0\1\17\1\234\4\17" +
            "\1\0\3\17\1\0\1\17\2\0\5\17\1\0\1\17" +
            "\25\0\7\17\1\0\2\17\1\0\1\17\1\235\4\17";

    private static int[] zzUnpackTrans() {
        int[] result = new int[4929];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\11\0\1\11\5\1\2\11\5\1\2\11\3\1\5\11" +
            "\1\1\6\11\6\1\1\11\2\1\1\11\2\1\1\11" +
            "\2\1\16\11\1\1\1\0\1\1\1\0\3\1\1\11" +
            "\5\1\1\11\1\1\5\11\13\1\2\11\1\1\1\11" +
            "\7\1\1\0\1\1\1\0\14\1\1\0\13\1\1\0" +
            "\23\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[157];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }
    /** the input device */
    private java.io.Reader zzReader;
    /** the current state of the DFA */
    private int zzState;
    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;
    /** this buffer contains the current text to be matched and is
    the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
    /** the textposition at the last accepting state */
    private int zzMarkedPos;
    /** the current text position in the buffer */
    private int zzCurrentPos;
    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;
    /** endRead marks the last character in the buffer, that has been read
    from input */
    private int zzEndRead;
    /** number of newlines encountered up to the start of the matched text */
    private int yyline;
    /** the number of characters up to the start of the matched text */
    private int yychar;
    /**
     * the number of characters from the last newline up to the start of the 
     * matched text
     */
    private int yycolumn;
    /** 
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /* user code: */
    /* ATRIBUTOS */
    private TablaSimbolos _tablaSimbolos;
    private GestorErrores _gestorErrores;
    private String _lexema = new String();
    private int _numComentariosAbiertos = 0;
    private String _fuenteDelError = null; // Para saber la fuente de la que procedemos al ir al sumidero

    /**
     * Crea el token correspondiente.
     *
     * @param   tipo  Campo tipo del token del token a generar. 
     * @param   valor  Campo atributo del token a generar.
     */
    private Token creaToken(TipoToken tipo, Object valor) {

        ArrayList<Object> atributos = new ArrayList<Object>();

        if (tipo == TipoToken.PUNTUACION) {
            atributos.add((TipoPuntuacion) valor);
        } else if (tipo == TipoToken.OPERADOR_SUMADOR) {
            atributos.add((TipoOperadorSumador) valor);
        } else if (tipo == TipoToken.OPERADOR_COMPARADOR) {
            atributos.add((TipoOperadorComparador) valor);
        } else if (tipo == TipoToken.OPERADOR_MULTIPLICADOR) {
            atributos.add((TipoOperadorMultiplicador) valor);
        } else if (tipo == TipoToken.OPERADOR_UNITARIO) {
            atributos.add((TipoOperadorUnitario) valor);
        } else if (tipo == TipoToken.TIPO_SIMPLE) {
            atributos.add((TipoSimple) valor);
        } else if (tipo == TipoToken.CONSTANTE_PREDEFINIDA) {
            atributos.add((ConstantePredefinida) valor);
        } else if (tipo == TipoToken.IDENTIFICADOR) {

            // Si es Palabra Reservada
            if (_tablaSimbolos.esPalabraReservada((String) valor)) {
                tipo = TipoToken.PALABRA_RESERVADA;
            }
            
            // Si es funcion predefinida
            if(_tablaSimbolos.esFuncionPredefinida((String) valor)){

                atributos.add(FuncionesPredefinidas.valueOf((String) valor));
                tipo = TipoToken.FUNCION_PREDEFINIDA;
            }
            else // Si es procedimiento predefinido
                if(_tablaSimbolos.esProcedimientoPredefinido((String) valor)){

                    atributos.add(ProcedimientosPredefinidos.valueOf((String) valor));
                    tipo = TipoToken.PROCEDIMIENTO_PREDEFINIDO;
                }
                else{ // Si es un identificador
                    atributos.add((String) valor);
                    _tablaSimbolos.insertarIdentificador((String)valor);
                }
            
        } else if (tipo == TipoToken.NUMERO_ENTERO) {
            atributos.add(new Integer((Integer) valor));
        } else if (tipo == TipoToken.NUMERO_REAL) {
            atributos.add(new Double((Double) valor));
        } else if (tipo == TipoToken.CARACTER) {
            atributos.add(new Character((Character) valor));
        } else if (tipo == TipoToken.CADENA) {
            atributos.add(new String((String) valor));
        }

        return new Token(tipo.ordinal(), yyline, yycolumn, atributos);
    }

    /**
     * Constructor de la clase Scanner.
     *
     * @param   in  El Reader para leer el fichero de entrada.
     * @param   gestorErrores  El gestor de errores del compilador.
     * @param   tablaSimboloes  La tabla de simbolos del compilador.
     */
    public Scanner(Reader in, GestorErrores gestorErrores, TablaSimbolos tablaSimbolos) {

        zzReader = in;
        _tablaSimbolos = tablaSimbolos;
        _gestorErrores = gestorErrores;
        yyline = 1;
    }

    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public Scanner(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param   in  the java.io.Inputstream to read input from.
     */
    public Scanner(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Devuelve la columna asociada al token.
     * 
     * @return La columna asociada al token.
     */
    public int getYycolumn() {
        
        return yycolumn;
    }

    /**
     * Establece la columna asociada al token a valor <b>yycolumn</b>.
     * 
     * @param yycolumn Nuevo valor a establecer.
     */
    public void setYycolumn(int yycolumn) {
        
        this.yycolumn = yycolumn;
    }

    /**
     * Devuelve la linea asociada al token.
     * 
     * @return La linea asociada al token.
     */
    public int getYyline() {
        
        return yyline;
    }

    /**
     * Establece la linea asociada al token a valor <b>yyline</b>.
     * 
     * @param yyline Nuevo valor a establecer.
     */
    public void setYyline(int yyline) {
        
        this.yyline = yyline;
    }
  
    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     * 
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

        /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream    
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream 
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader   the new input stream 
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the 
     * matched text. 
     * 
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. 
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of 
     * yypushback(int) and a match-all fallback rule) this method 
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }
        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public Token get_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn++;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 64: {
                    return creaToken(TipoToken.CONSTANTE_PREDEFINIDA, ConstantePredefinida.TRUE);
                }
                case 73:
                    break;
                case 12: {
                    return creaToken(TipoToken.OPERADOR_COMPARADOR, TipoOperadorComparador.MAYOR);
                }
                case 74:
                    break;
                case 4: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.PUNTO);
                }
                case 75:
                    break;
                case 16: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.CORCHETE_IZQUIERDO);
                }
                case 76:
                    break;
                case 8: {
                    yybegin(YYINITIAL);
                    /* Generamos el error correspondiente */
                    TErrorLexico error = new TErrorLexico("Cadena o caracter sin terminar al final de linea, falta \" o \'", yyline, yycolumn);
                    _gestorErrores.insertaErrorLexico(error);
                }
                case 77:
                    break;
                case 21: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.PUNTERO);
                }
                case 78:
                    break;
                case 43: { /* Nos vamos al siguiente estado */
                    yybegin(CARACTER_EN_OCTAL);
                    _lexema = yytext();
                }
                case 79:
                    break;
                case 52: {
                    return creaToken(TipoToken.OPERADOR_SUMADOR, TipoOperadorSumador.OR);
                }
                case 80:
                    break;
                case 31: { /* Devolvemos un car�cter a la entrada */
                    yypushback(1);

                    /* Volvemos al estado inicial */
                    yybegin(YYINITIAL);

                    /* Devolvemos el token entero */
                    return creaToken(TipoToken.NUMERO_ENTERO, new Integer(_lexema));
                }
                case 81:
                    break;
                case 57: {
                    return creaToken(TipoToken.OPERADOR_MULTIPLICADOR, TipoOperadorMultiplicador.AND);
                }
                case 82:
                    break;
                case 40: { /* Ignora todos los caracteres que vengan */
                    _lexema += yytext();
                }
                case 83:
                    break;
                case 67: {
                    return creaToken(TipoToken.TIPO_SIMPLE, TipoSimple.BITSET);
                }
                case 84:
                    break;
                case 17: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.CORCHETE_DERECHO);
                }
                case 85:
                    break;
                case 41: { /* Devolvemos un car�cter a la entrada */
                    yypushback(1);

                    /* Volvemos al estado inicial */
                    yybegin(YYINITIAL);

                    TErrorLexico error = null;

                    /* Generamos el error correspondiente */
                    if (_fuenteDelError.matches("numero_entero")) {
                        error = new TErrorLexico("El formato del identificador " + _lexema + yytext() + " no es valido.", yyline, yycolumn);
                    } else if (_fuenteDelError.matches("identificador")) {
                        error = new TErrorLexico("El caracter " + _lexema + yytext() + " no es valido en un identificador.", yyline, yycolumn);
                    } else if (_fuenteDelError.matches("numero_real")) {
                        error = new TErrorLexico("El numero real " +  _lexema + yytext() + " esta mal formado.", yyline, yycolumn);
                    } else if (_fuenteDelError.matches("numero_hexadecimal")) {
                        error = new TErrorLexico("El numero hexadecimal " + _lexema + yytext() + " esta mal formado.", yyline, yycolumn);
                    } else if (_fuenteDelError.matches("numero_octal")) {
                        error = new TErrorLexico("El numero octal " + _lexema + yytext() + " esta mal formado.", yyline, yycolumn);
                    } else if (_fuenteDelError.matches("caracter_en_octal")) {
                        error = new TErrorLexico("El caracter octal " + _lexema + yytext() + " mal formado.", yyline, yycolumn);
                    }
                    _gestorErrores.insertaErrorLexico(error);
                }
                case 86:
                    break;
                case 47: {
                    return creaToken(TipoToken.OPERADOR_COMPARADOR, TipoOperadorComparador.MENOR_IGUAL);
                }
                case 87:
                    break;
                case 20: {
                    return creaToken(TipoToken.OPERADOR_COMPARADOR, TipoOperadorComparador.IGUAL);
                }
                case 88:
                    break;
                case 60: {
                    return creaToken(TipoToken.OPERADOR_MULTIPLICADOR, TipoOperadorMultiplicador.DIVISION_ENTERA);
                }
                case 89:
                    break;
                case 37: { /* Devolvemos el car�cter a la entrada */
                    yypushback(1);

                    /* Nos vamos al estado inicial */
                    yybegin(YYINITIAL);

                    /* Realizamos la conversi�n del texto a hexadecimal. */
                    String auxiliar = _lexema;

                    /* Quitamos la "H" */
                    auxiliar = auxiliar.substring(0, auxiliar.length() - 1);
                    int traduccionHex = 0;

                    /* Iremos guardando aqu� las potencias de 16 */
                    int numBase = 1;
                    char c;
                    int j;
                    for (int i = 0; i < auxiliar.length(); i++) {
                        c = auxiliar.charAt(auxiliar.length() - i - 1);
                        j = Character.digit(c, 16);
                        traduccionHex += j * numBase;
                        numBase = numBase * 16;
                    }

                    return creaToken(TipoToken.NUMERO_ENTERO, new Integer(traduccionHex));
                }
                case 90:
                    break;
                case 69: {
                    return creaToken(TipoToken.TIPO_SIMPLE, TipoSimple.INTEGER);
                }
                case 91:
                    break;
                case 10: {
                    return creaToken(TipoToken.OPERADOR_MULTIPLICADOR, TipoOperadorMultiplicador.DIVISION);
                }
                case 92:
                    break;
                case 2: { /* Nos vamos al siguiente estado */
                    yybegin(IDENTIFICADOR);
                    _lexema = yytext();
                }
                case 93:
                    break;
                case 70: {
                    return creaToken(TipoToken.TIPO_SIMPLE, TipoSimple.LONGINT);
                }
                case 94:
                    break;
                case 51: {
                    return creaToken(TipoToken.OPERADOR_COMPARADOR, TipoOperadorComparador.IN);
                }
                case 95:
                    break;
                case 26: {
                    return creaToken(TipoToken.OPERADOR_COMPARADOR, TipoOperadorComparador.ALMOHADILLA);
                }
                case 96:
                    break;
                case 13: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.PARENTESIS_IZQUIERDO);
                }
                case 97:
                    break;
                case 28: { /* Nos vamos a un estado en el que ignoramos el resto de caracteres hasta el pr�ximo delimitador*/
                    yybegin(SUMIDERO);

                    _fuenteDelError = "identificador";

                    _lexema += yytext();
                }
                case 98:
                    break;
                case 54: {
                    _numComentariosAbiertos++;
                }
                case 99:
                    break;
                case 23: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.LLAVE_IZQUIERDA);
                }
                case 100:
                    break;
                case 1: {
                    TErrorLexico error = new TErrorLexico("El caracter " + yytext() + " no valido en este contexto", yyline, yycolumn);
                    _gestorErrores.insertaErrorLexico(error);
                }
                case 101:
                    break;
                case 56: { /* Nos vamos al siguiente estado */
                    yybegin(NUMERO_REAL);
                    _lexema = yytext();
                }
                case 102:
                    break;
                case 44: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.PUNTO_PUNTO);
                }
                case 103:
                    break;
                case 24: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.LLAVE_DERECHA);
                }
                case 104:
                    break;
                case 15: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.PARENTESIS_DERECHO);
                }
                case 105:
                    break;
                case 59: {
                    return creaToken(TipoToken.OPERADOR_UNITARIO, TipoOperadorUnitario.NOT);
                }
                case 106:
                    break;
                case 65: {
                    return creaToken(TipoToken.TIPO_SIMPLE, TipoSimple.PROC);
                }
                case 107:
                    break;
                case 62: {
                    return creaToken(TipoToken.TIPO_SIMPLE, TipoSimple.CHAR);
                }
                case 108:
                    break;
                case 50: {
                    return creaToken(TipoToken.OPERADOR_ASIGNACION, yytext());
                }
                case 109:
                    break;
                case 22: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.BARRA_VERTICAL);
                }
                case 110:
                    break;
                case 66: {
                    return creaToken(TipoToken.CONSTANTE_PREDEFINIDA, ConstantePredefinida.FALSE);
                }
                case 111:
                    break;
                case 29: { /* Devolvemos un car�cter a la entrada */
                    yypushback(1);

                    /* Volvemos al estado inicial */
                    yybegin(YYINITIAL);

                    /* Devolvemos el token correspondiente */
                    return creaToken(TipoToken.IDENTIFICADOR, _lexema);
                }
                case 112:
                    break;
                case 27: {
                    return creaToken(TipoToken.OPERADOR_UNITARIO, TipoOperadorUnitario.NEGACION);
                }
                case 113:
                    break;
                case 36: { /* Nos vamos a un estado en el que ignoramos el resto de caracteres hasta el pr�ximo delimitador*/
                    yybegin(SUMIDERO);

                    _fuenteDelError = "numero_hexadecimal";

                    _lexema += yytext();
                }
                case 114:
                    break;
                case 72: {
                    return creaToken(TipoToken.TIPO_SIMPLE, TipoSimple.LONGREAL);
                }
                case 115:
                    break;
                case 63: {
                    return creaToken(TipoToken.TIPO_SIMPLE, TipoSimple.REAL);
                }
                case 116:
                    break;
                case 55: { /* Nos vamos al siguiente estado */
                    yybegin(NUMERO_HEXADECIMAL);
                    _lexema = yytext();
                }
                case 117:
                    break;
                case 71: {
                    return creaToken(TipoToken.TIPO_SIMPLE, TipoSimple.CARDINAL);
                }
                case 118:
                    break;
                case 14: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.COMA);
                }
                case 119:
                    break;
                case 48: {
                    return creaToken(TipoToken.OPERADOR_COMPARADOR, TipoOperadorComparador.MAYOR_IGUAL);
                }
                case 120:
                    break;
                case 11: {
                    return creaToken(TipoToken.OPERADOR_COMPARADOR, TipoOperadorComparador.MENOR);
                }
                case 121:
                    break;
                case 35: { /* Devolvemos el car�cter a la entrada */
                    yypushback(1);

                    /* Nos vamos al estado inicial */
                    yybegin(YYINITIAL);

                    /* Realizamos la conversi�n de car�cter en octal a car�cter. */
                    String entrada = _lexema;

                    /* Le quitamos la C */
                    String[] resultado = entrada.split("C");

                    int decimal = Integer.parseInt(resultado[0], 8);
                    char ch = (char) decimal;

                    return creaToken(TipoToken.CARACTER, new Character(ch));
                }
                case 122:
                    break;
                case 30: { /* Nos vamos a un estado en el que ignoramos el resto de caracteres hasta el pr�ximo delimitador*/
                    yybegin(SUMIDERO);

                    _fuenteDelError = "numero_entero";

                    _lexema += yytext();
                }
                case 123:
                    break;
                case 6: {
                    return creaToken(TipoToken.OPERADOR_SUMADOR, TipoOperadorSumador.RESTA);
                }
                case 124:
                    break;
                case 25: {
                    return creaToken(TipoToken.OPERADOR_MULTIPLICADOR, TipoOperadorMultiplicador.AMPERSAND);
                }
                case 125:
                    break;
                case 9: {
                    return creaToken(TipoToken.OPERADOR_MULTIPLICADOR, TipoOperadorMultiplicador.MULTIPLICACION);
                }
                case 126:
                    break;
                case 38: { /* Nos vamos a un estado en el que ignoramos el resto de caracteres hasta el pr�ximo delimitador*/
                    yybegin(SUMIDERO);

                    _fuenteDelError = "numero_octal";

                    _lexema += yytext();
                }
                case 127:
                    break;
                case 5: {
                    return creaToken(TipoToken.OPERADOR_SUMADOR, TipoOperadorSumador.SUMA);
                }
                case 128:
                    break;
                case 39: { /* Devolvemos el car�cter a la entrada */
                    yypushback(1);

                    /* Nos vamos al estado inicial */
                    yybegin(YYINITIAL);

                    /* Realizamos la conversi�n del texto a n�mero octal. */

                    String auxiliar = _lexema;

                    /* Quitamos la "B" */
                    auxiliar = auxiliar.substring(0, auxiliar.length() - 1);

                    int traduccionOct = 0;

                    /* Iremos guardando aqui las potencias de 8 */
                    int numBase = 1;
                    char c;
                    int j;

                    for (int i = 0; i < auxiliar.length(); i++) {
                        c = auxiliar.charAt(auxiliar.length() - i - 1);
                        j = Character.digit(c, 8);
                        traduccionOct += j * numBase;
                        numBase = numBase * 8;
                    }

                    return creaToken(TipoToken.NUMERO_ENTERO, new Integer(traduccionOct));
                }
                case 129:
                    break;
                case 32: { /* Nos vamos a un estado en el que ignoramos el resto de caracteres hasta el pr�ximo delimitador*/
                    yybegin(SUMIDERO);

                    _fuenteDelError = "numero_real";

                    _lexema += yytext();
                }
                case 130:
                    break;
                case 53: {
                    if (--_numComentariosAbiertos == 0) {
                        yybegin(YYINITIAL);
                    }
                }
                case 131:
                    break;
                case 18: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.PUNTO_Y_COMA);
                }
                case 132:
                    break;
                case 68: {
                    return creaToken(TipoToken.TIPO_SIMPLE, TipoSimple.BOOLEAN);
                }
                case 133:
                    break;
                case 34: { /* Nos vamos a un estado en el que ignoramos el resto de caracteres hasta el pr�ximo delimitador*/
                    yybegin(SUMIDERO);

                    _fuenteDelError = "caracter_en_octal";

                    _lexema += yytext();
                }
                case 134:
                    break;
                case 42: { /* Nos vamos al siguiente estado */
                    yybegin(NUMERO_OCTAL);
                    _lexema = yytext();
                }
                case 135:
                    break;
                case 61: {
                    return creaToken(TipoToken.OPERADOR_MULTIPLICADOR, TipoOperadorMultiplicador.MOD);
                }
                case 136:
                    break;
                case 33: { /* Devolvemos el car�cter a la entrada */
                    yypushback(1);

                    /* Nos vamos al estado inicial */
                    yybegin(YYINITIAL);

                    /* Devolvemos el n�mero real */
                    return creaToken(TipoToken.NUMERO_REAL, new Double(_lexema));
                }
                case 137:
                    break;
                case 3: { /* Nos vamos al siguiente estado */
                    yybegin(NUMERO_ENTERO);
                    _lexema = yytext();
                }
                case 138:
                    break;
                case 46: {
                    return creaToken(TipoToken.OPERADOR_COMPARADOR, TipoOperadorComparador.DISTINTO);
                }
                case 139:
                    break;
                case 45: { /* Quitamos las comillas (simples o dobles) del lexema */
                    String str = yytext().substring(1, yylength() - 1);

                    if (str.length() == 1) {
                        return creaToken(TipoToken.CARACTER, new Character(yytext().charAt(1)));
                    } else {
                        return creaToken(TipoToken.CADENA, str);
                    }
                }
                case 140:
                    break;
                case 49: {
                    _numComentariosAbiertos++;
                    yybegin(COMENTARIO);
                }
                case 141:
                    break;
                case 58: {
                    return creaToken(TipoToken.CONSTANTE_PREDEFINIDA, ConstantePredefinida.NIL);
                }
                case 142:
                    break;
                case 7: {
                }
                case 143:
                    break;
                case 19: {
                    return creaToken(TipoToken.PUNTUACION, TipoPuntuacion.DOS_PUNTOS);
                }
                case 144:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case COMENTARIO: {
                                yybegin(YYINITIAL);

                                /* Generamos el error correspondiente */
                                TErrorLexico error = new TErrorLexico("Comentario mal formado, falta \'*)\'", yyline, yycolumn);
                                _gestorErrores.insertaErrorLexico(error);
                            }
                            case 158:
                                break;
                            default: {
                                return creaToken(TipoToken.EOF, "");
                            }
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }
}
