
// SlkParser.java - generated by the SLK parser generator 

public class SlkParser {

private static short get_conditional_production ( short symbol ) { return (short) 0; }

private static short[] Parse = {

0,0,294,24,295,229,4,295,3,1,299,2,94,228,299,229,221,229,299
,95,294,299,299,287,299,22,220,94,220,299,229,229,235,19,42,18,42,295,295
,42,295,220,220,234,295,299,9,9,21,20,294,294,294,294,92,298,298,286,299
,299,299,299,299,299,299,299,298,230,231,91,294,294,294,294,294,294,294,294,294
,294,294,294,294,294,294,294,151,152,196,197,198,199,200,201,202,203,204,205,206
,190,191,192,193,194,195,207,294,294,81,294,294,294,294,294,294,294,294,294,294
,76,74,37,109,74,37,154,155,74,37,5,108,74,108,75,38,74,74,74,6
,74,37,81,81,238,74,239,14,233,13,74,77,232,74,74,74,239,74,239,74
,237,74,16,15,74,169,170,171,236,74,74,239,239,74,74,74,74,74,74,74
,74,74,74,74,74,74,74,133,133,7,279,133,279,251,249,133,251,248,278,133
,279,133,279,133,132,133,268,133,44,250,43,302,133,43,8,279,279,279,133,266
,133,133,133,246,133,269,133,53,133,302,303,133,311,267,268,247,133,133,131,310
,133,133,133,133,133,133,133,133,133,133,133,133,133,133,173,53,34,10,174,302
,302,302,302,23,265,56,25,56,173,55,56,35,281,173,33,261,311,264,261,302
,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,56,55,260,56,280
,56,56,56,56,56,293,56,56,56,56,292,56,56,289,273,302,302,26,302,302
,302,302,302,302,302,302,302,302,34,34,34,34,34,34,34,34,34,142,143,58
,256,57,272,36,57,39,134,289,144,288,257,56,56,56,56,56,56,56,56,56
,56,56,56,56,56,56,56,56,56,68,40,291,59,41,57,57,60,57,61,27
,62,57,63,64,271,65,67,135,136,137,138,139,140,141,27,107,175,27,312,28
,314,29,30,270,31,290,32,45,313,46,315,208,209,107,210,211,212,213,214,215
,216,217,218,219,47,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66
,66,66,66,107,107,107,107,48,49,306,50,27,27,27,27,27,27,27,27,27
,159,51,52,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,110
,176,176,176,176,176,176,176,176,176,176,176,176,176,307,54,113,69,110,80,107
,107,82,107,107,107,107,107,107,107,107,107,107,84,113,177,178,179,180,181,182
,183,184,185,186,187,188,189,110,110,110,110,316,158,158,158,158,158,158,158,158
,158,317,85,113,113,113,113,110,110,110,110,110,110,110,110,110,110,110,110,110
,110,110,110,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,116
,86,87,88,110,110,89,110,110,110,110,110,110,110,110,110,110,119,116,106,113
,113,172,113,113,113,113,113,113,113,113,113,113,0,277,119,277,0,0,276,276
,0,277,0,277,0,277,0,116,116,117,118,145,146,147,148,149,150,0,277,277
,277,0,0,0,119,119,0,116,116,116,116,116,116,116,116,116,116,116,116,116
,116,116,116,153,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119
,122,0,0,116,116,153,116,116,116,116,116,116,116,116,116,116,11,285,128,0
,119,119,0,119,119,119,119,119,119,119,119,119,119,0,11,160,161,162,163,164
,165,166,167,168,0,0,0,0,126,127,284,285,0,0,0,153,153,153,153,153
,153,153,153,153,11,11,11,11,129,129,124,124,125,125,125,125,125,125,125,125
,125,123,123,123,11,11,11,11,0,0,0,0,0,0,0,0,0,11,11,11
,0,0,0,0,130,130,0,130,130,130,130,130,130,130,130,130,130,120,0,0
,120,225,0,225,120,0,224,224,120,0,0,225,120,225,120,0,120,0,0,0
,0,120,0,0,0,0,225,225,225,120,120,120,0,120,0,120,0,120,0,0
,120,0,0,0,0,120,120,0,0,120,120,120,120,120,120,120,120,121,121,121
,121,121,121,114,0,0,114,0,0,0,114,0,258,0,114,0,0,0,114,0
,114,0,114,0,0,0,0,114,0,0,0,259,0,0,258,114,114,114,0,114
,258,114,0,114,0,0,114,0,0,0,0,115,115,0,0,114,114,114,114,114
,114,114,115,301,0,0,242,301,243,0,243,301,0,0,301,301,0,301,243,0
,243,0,301,0,258,258,258,258,258,258,258,258,258,243,243,243,0,0,301,78
,0,0,0,0,0,0,0,0,301,301,0,301,301,301,301,301,301,301,301,301
,300,300,300,300,300,300,111,0,0,111,227,0,0,111,0,226,226,112,227,0
,227,111,227,111,0,111,0,0,0,0,111,0,0,0,0,227,227,0,111,111
,111,0,111,0,111,0,111,0,0,111,0,0,0,0,0,0,0,0,112,112
,112,112,112,112,112,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79
,79,79,79,297,0,0,0,297,0,0,71,296,156,71,297,297,0,297,222,0
,0,0,297,223,0,0,73,0,0,0,156,0,0,0,0,0,222,0,297,72
,0,0,0,71,71,0,71,0,0,0,71,297,296,296,296,296,296,296,296,274
,156,156,156,156,275,156,222,222,222,222,0,0,0,0,0,0,0,274,0,0
,156,156,156,156,308,0,222,222,222,222,0,0,0,156,156,156,0,0,0,222
,222,222,308,0,0,0,0,274,274,274,274,283,0,83,282,0,0,0,0,0
,90,0,0,0,0,0,0,274,274,274,274,83,308,308,308,308,0,309,90,0
,274,274,274,0,283,283,0,283,0,0,0,283,308,308,308,308,93,0,0,0
,96,83,83,83,83,308,308,308,90,90,90,90,0,0,93,0,0,0,96,0
,0,83,83,83,83,0,0,0,90,90,90,90,0,0,83,83,83,97,0,0
,0,90,90,90,93,93,93,93,96,96,96,96,0,0,0,97,0,0,0,0
,0,0,157,0,93,93,93,93,96,96,96,96,0,0,253,0,0,93,93,93
,157,96,96,96,0,97,97,97,97,0,0,0,0,255,0,0,253,0,0,0
,0,0,252,0,0,97,97,97,97,0,157,157,157,157,12,255,12,0,97,97
,97,254,0,0,12,0,12,0,0,0,157,157,157,157,0,0,0,98,0,12
,12,12,0,157,157,157,253,253,253,253,253,253,253,253,253,98,0,0,0,0
,70,70,99,0,70,255,255,255,255,255,255,255,255,255,70,0,305,70,0,0
,104,0,0,0,0,98,98,0,0,0,70,70,0,0,70,70,0,70,304,0
,244,70,245,0,245,98,98,98,98,0,102,103,245,17,245,17,0,0,98,98
,98,0,0,17,0,17,0,245,245,245,105,105,101,101,0,0,0,0,17,17
,17,0,0,100,100,100,0,0,305,305,305,305,305,305,305,305,305,262,0,263
,0,263,241,0,240,0,0,0,0,263,0,263,240,0,240,0,0,0,0,0
,0,0,0,0,263,263,263,240,240,241,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

private static int[] Parse_row = {0

,4,1,122,134,183,206,38,245,694,1330,133,1429,20,247,2,252
,315,377,254,323,118,323,346,348,33,206,380,380,404,417,446,421
,432,442,225,488,265,263,337,494,1377,1066,117,957,463,105,462,1171
,471,499,535,535,534,536,1178,44,1214,2,1218,1255,1355,1380,578,393
,112,477,982,493,859,577,594,793,678,184,331,285,567,17,661,54
,1070,1280,458,641,82,599,247,394,428,1,305,13,1076,797,986,2
,59,141,31,153,142,1478,924,1418,212,190,189,1292,1311,329,870,271
,1475,257,212,204,377,312,1117,609,186,268,1167,693,20,309,367,263
,1,1056,4,916,209,1394,438,1142,221,387,389,520
,0};

private static short[] Conflict = {

0
};

private static int[] Conflict_row = {0


,0};

private static short[] Production = {0

,0,2049,-1,2050,0,2049,-2,2051,0,2049,-3,2052,0,2050,46,257,2058,2053
,0,2051,46,257,258,2140,2054,0,2052,2050,259,0,2053,2142,59,2141,257,260
,0,2054,2144,2143,59,257,260,261,0,2055,2146,2136,263,2145,0,2056,2134,2147,264
,0,2057,2107,0,2058,258,2085,2060,0,2059,2062,0,2059,2149,266,0,2059,2078
,0,2059,59,2081,0,2060,2150,0,2061,2062,0,2061,2064,0,2061,2078
,0,2061,2080,0,2061,2084,0,2062,2151,267,0,2063,2107,61,257,0,2064,2152,266
,0,2065,2066,61,257,0,2066,2067,0,2066,2070,0,2066,2071,0,2066,2072
,0,2066,2075,0,2066,2076,0,2067,2068,0,2067,2069,2131,0,2067,93,2107,268,2107,91
,0,2068,41,2134,40,0,2069,0,2069,93,2107,268,2107,91,0,2070,2067,270,269
,0,2071,2066,270,2153,2067,271,0,2072,258,2073,272,0,2073,2154,2074
,0,2074,0,2074,2066,58,2134,0,2075,2066,274,273,0,2076,2155,275
,0,2077,2160,41,2159,40,0,2078,2161,276,0,2079,2066,58,2134,0,2080,59,257,2058,59,2081
,0,2081,2162,257,275,0,2082,2165,41,2164,40,0,2083,2127,58,2134,2166
,0,2084,59,257,2058,2169,2168,59,2167,257,260,0,2085,2170,0,2086,2171,2087
,0,2087,0,2087,-4,2088,0,2087,2093,0,2087,2095,0,2087,2097,0,2087,2098
,0,2087,2099,0,2087,2100,0,2087,2101,0,2087,2138,0,2087,2102,0,2087,278
,0,2088,-6,2089,-5,257,0,2089,-7,2090,2091,0,2090,0,2090,-8,2114,279
,0,2090,2111,0,2091,0,2091,2091,93,2112,91,0,2091,2091,2092,46
,0,2091,2091,94,0,2092,257,0,2092,2138,0,2093,258,2094,2086,281,2114,280
,0,2094,2173,2172,0,2095,258,2175,2174,2096,270,2114,284,0,2096,2086,58,2103
,0,2097,-9,258,2086,286,2114,285,0,2098,-10,2114,288,2086,287,0,2099,-11,258,2086,289
,0,2100,-12,258,2086,286,2176,2114,274,2114,279,257,290,0,2101,-13,258,2086,286,2091,257,292
,0,2102,2177,293,0,2103,-15,2104,2105,0,2104,-16,0,2104,-17,2104,2105,44
,0,2105,2106,2107,0,2106,0,2106,2107,268,0,2107,2178,2108,0,2108,2179,2109,2118
,0,2109,2180,2110,0,2110,257,0,2110,2133,0,2110,2128,0,2110,294
,0,2110,295,0,2110,41,2107,40,0,2110,2110,2126,0,2111,41,2181,40
,0,2112,2113,2114,0,2113,0,2113,2113,-8,2114,44,0,2114,-19,2115,-18,2116
,0,2115,0,2115,-18,2116,2123,0,2116,-21,2117,-20,2119,2118,0,2117
,0,2117,2117,-23,-22,2119,2124,0,2118,0,2118,43,0,2118,45,0,2119,2120,-24,2121
,0,2120,0,2120,2120,2121,2125,0,2121,2122,257,0,2121,2133,0,2121,-25,2128
,0,2121,125,2129,123,2132,0,2121,294,0,2121,295,0,2121,41,2114,40
,0,2121,2121,2126,0,2121,2139,0,2122,125,2129,123,0,2122,2111,0,2122,2091
,0,2123,61,0,2123,296,0,2123,35,0,2123,60,0,2123,297,0,2123,62
,0,2123,298,0,2123,299,0,2124,43,0,2124,45,0,2124,300,0,2125,42
,0,2125,47,0,2125,301,0,2125,302,0,2125,38,0,2125,303,0,2126,304
,0,2126,126,0,2127,2131,2182,0,2128,-26,305,0,2128,-27,306,0,2129,2184
,0,2130,2185,2107,0,2131,2132,0,2131,257,0,2132,307,0,2132,308
,0,2132,309,0,2132,310,0,2132,311,0,2132,312,0,2132,313,0,2132,314
,0,2132,315,0,2133,316,0,2133,317,0,2133,318,0,2134,2135,257
,0,2135,0,2135,2135,257,44,0,2136,257,0,2136,2137,0,2137,319
,0,2137,320,0,2137,321,0,2137,322,0,2137,323,0,2137,324,0,2137,325
,0,2137,326,0,2137,327,0,2137,328,0,2137,329,0,2137,330,0,2137,331
,0,2138,41,2186,2114,40,332,0,2138,41,2187,2114,40,333,0,2138,41,2114,44,2114,40,334
,0,2138,41,2114,44,2114,40,335,0,2138,41,2114,40,336,0,2138,41,2114,40,337
,0,2138,41,2114,40,321,0,2138,41,2114,44,2114,40,322,0,2138,41,2114,40,323
,0,2138,41,2114,44,2114,40,324,0,2138,41,2114,40,325,0,2138,41,2114,40,326
,0,2138,41,2114,40,327,0,2138,41,2114,40,328,0,2138,41,2114,40,329
,0,2138,41,2188,2114,44,2114,40,330,0,2138,331,0,2138,338,0,2139,41,2114,40,339
,0,2139,41,341,40,340,0,2139,41,2114,40,342,0,2139,41,2114,40,343
,0,2139,41,2114,40,344,0,2139,41,2131,40,345,0,2139,41,2131,40,346
,0,2139,41,2114,40,347,0,2139,41,2114,40,348,0,2139,41,2131,40,349
,0,2139,41,2114,40,350,0,2139,41,2114,44,2131,40,351,0,2140,2140,2059
,0,2140,0,2141,2057,0,2141,0,2142,2142,59,2055,0,2142,0,2143,2143,59,2055
,0,2143,0,2144,59,2056,0,2144,0,2145,257,262,0,2145,0,2146,2146,2136,44
,0,2146,0,2147,265,0,2147,0,2148,2066,61,0,2148,0,2149,2149,59,2148,257
,0,2149,0,2150,2150,2061,0,2150,0,2151,2151,59,2063,0,2151,0,2152,2152,59,2065
,0,2152,0,2153,2153,2067,44,0,2153,0,2154,2154,2074,59,0,2154
,0,2155,2077,0,2155,0,2156,276,0,2156,0,2157,276,0,2157,0,2158,2158,2127,2157,44
,0,2158,0,2159,2158,2127,2156,0,2159,0,2160,2131,58,0,2160,0,2161,2161,59,2079
,0,2161,0,2162,2082,0,2162,0,2163,2163,2083,59,0,2163,0,2164,2163,2083
,0,2164,0,2165,2131,58,0,2165,0,2166,276,0,2166,0,2167,2107
,0,2167,0,2168,2168,59,2055,0,2168,0,2169,59,2056,0,2169,0,2170,2086,277
,0,2170,0,2171,2171,2087,59,0,2171,0,2172,2172,2086,281,2114,282
,0,2172,0,2173,2086,283,0,2173,0,2174,2174,2096,124,0,2174,0,2175,2086,283
,0,2175,0,2176,2107,291,0,2176,0,2177,2114,0,2177,-14,0,2178,2108,2123
,0,2178,0,2179,2179,2109,2124,0,2179,0,2180,2180,2110,2125,0,2180
,0,2181,2112,0,2181,0,2182,270,271,0,2182,0,2183,2183,2130,44
,0,2183,0,2184,2183,2130,0,2184,0,2185,2107,268,0,2185,0,2186,2114,44
,0,2186,0,2187,2114,44,0,2187,0,2188,2114,44,0,2188
,0};

private static int[] Production_row = {0

,1,5,9,13,19,26,30,37,45,51,56,59,64,67,71,74
,78,81,84,87,90,93,96,100,105,109,114,117,120,123,126,129
,132,135,139,146,151,153,160,165,172,177,181,183,188,193,197,203
,207,212,219,224,230,236,247,250,254,256,260,263,266,269,272,275
,278,281,284,287,290,296,301,303,308,311,313,319,324,328,331,334
,342,346,355,360,368,375,381,394,403,407,412,415,421,425,427,431
,435,440,444,447,450,453,456,459,464,468,473,477,479,485,491,493
,498,505,507,514,516,519,522,527,529,534,538,541,545,551,554,557
,562,566,569,574,577,580,583,586,589,592,595,598,601,604,607,610
,613,616,619,622,625,628,631,634,637,641,645,649,652,656,659,662
,665,668,671,674,677,680,683,686,689,692,695,698,702,704,709,712
,715,718,721,724,727,730,733,736,739,742,745,748,751,754,761,768
,776,784,790,796,802,810,816,824,830,836,842,848,854,863,866,869
,875,881,887,893,899,905,911,917,923,929,935,943,947,949,952,954
,959,961,966,968,972,974,978,980,985,987,990,992,996,998,1004,1006
,1010,1012,1017,1019,1024,1026,1031,1033,1038,1040,1043,1045,1048,1050,1053,1055
,1061,1063,1068,1070,1074,1076,1081,1083,1086,1088,1093,1095,1099,1101,1105,1107
,1110,1112,1115,1117,1122,1124,1128,1130,1134,1136,1141,1143,1150,1152,1156,1158
,1163,1165,1169,1171,1175,1177,1180,1183,1187,1189,1194,1196,1201,1203,1206,1208
,1212,1214,1219,1221,1225,1227,1231,1233,1237,1239,1243,1245,1249
,0};

private static short[] Terminal_to_index = {0

,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,56,0,0,67,0,19,20,63,51,10,52,2,64,0,0,0,0,0,0,0,0,0,0,25,6,57,14,59,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,18,33,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,39,54,70,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,1,3,4,5,7,8,9,11,12,13,15,17,21,22,23,24,26,27,28,29,30,31,32,34,35,36,37,38,40,41,42,43
,44,45,46,47,48,49,50,55,58,60,61,62,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86
,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118

};

private static final short   END_OF_SLK_INPUT_ = 352;
private static final short   START_SYMBOL = 2049;

public static final int   NOT_A_SYMBOL = 0;
public static final int   NONTERMINAL_SYMBOL = 1;
public static final int   TERMINAL_SYMBOL = 2;
public static final int   ACTION_SYMBOL = 3;

public static int GetSymbolType ( short   symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0  &&  symbol < START_SYMBOL ) {
       symbol_type = TERMINAL_SYMBOL;
   } else if ( symbol < 0 ) {
       symbol_type = ACTION_SYMBOL;
   }

   return  symbol_type;
}

public static boolean IsNonterminal ( short   symbol )
{
   return ( symbol >= START_SYMBOL );
}

public static boolean IsTerminal ( short   symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

public static boolean IsAction ( short   symbol )
{
   return ( symbol < 0 );
}

public static short GetTerminalIndex ( short   token ){
 return ( Terminal_to_index [token] );
}

private static short
get_predicted_entry ( int        display,
                      SlkToken   tokens,
                      SlkLog     log,
                      short      production_number,
                      short      token,
                      int        scan_level,
                      int        depth )
{
 return  0;
}

public static void
parse ( int         display,
        SlkAction   action,
        SlkToken    tokens,
        SlkError    error,
        SlkLog      log,
        SlkTree     tree,
        short       start_symbol )
{
 short     rhs, lhs;
 short     production_number, entry, symbol, token, new_token;
 int       top, index, level;
 short[]   stack = new short[512];

 top = 511;
 stack [ top ] = 0;
 if ( start_symbol == 0 ) {
     start_symbol = START_SYMBOL;
 }
 if ( top > 0 ) { stack [--top] = start_symbol;
 } else { log.trace ("SlkParse: stack overflow\n"); return; }
 tree.make_root ( start_symbol );
 token = tokens.get();
 new_token = token;
 if ( display != 0 ) {
     log.trace ( "\n\n\t\tPARSE DERIVATION\n\n" );
 }

 for ( symbol = (stack[top] != 0  ? stack[top++] : (short) 0);  symbol != 0; ) {

     if ( symbol >= START_SYMBOL ) {

         entry = 0;
         level = 1;
         production_number = get_conditional_production ( symbol );
         if ( production_number != 0 ) {
             entry = get_predicted_entry ( display, tokens, log,
                                           production_number, token,
                                           level, 1 );
         }
         if ( entry == 0 ) {
             index = Parse_row [ symbol - (START_SYMBOL-1) ];
             index += Terminal_to_index [ token ];
             entry = Parse [ index ];
         }
         while ( entry < 0 ) {
             index = Conflict_row [-entry];
             index += Terminal_to_index [tokens.peek (level)];
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry != 0 ) {
             index = Production_row [ entry ];
             lhs = Production [ ++index ];
             if ( lhs == symbol ) {
                 rhs = Production [++index];
                 for ( ;  rhs != 0;  rhs = Production [++index] ) {
                     if ( top > 0 ) { stack [--top] = rhs;
                     } else { log.trace ("SlkParse: stack overflow\n"); return; }
                     tree.push_rhs_symbol ( rhs );
                 }
                 tree.add_rhs ();
                 if ( display != 0 ) {
                     log.trace_production ( entry );
                 }
             } else {
                 new_token = error.no_entry ( symbol, token, level-1 );
             }
         } else {                                       // no table entry
             new_token = error.no_entry ( symbol, token, level-1 );
         }

     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = tokens.get();
             new_token = token;
         } else {
             new_token = error.mismatch ( symbol, token );
         }

     } else {
         if ( display != 0 ) {
             log.trace_action ( symbol );
         }
         action.execute ( -symbol );
     }

     if ( token != new_token ) {
         if ( new_token != 0 ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }

     symbol = (stack[top] != 0  ? stack[top++] : (short) 0);
     tree.pop_current ();
 }

 if ( token != END_OF_SLK_INPUT_ ) {
     error.input_left ();
 }

}



};
