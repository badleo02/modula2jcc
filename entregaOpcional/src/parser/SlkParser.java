package parser;


// SlkParser.java - generated by the SLK parser generator 

public class SlkParser {

private static short get_conditional_production ( short symbol ) { return (short) 0; }

private static short[] Parse = {

0,0,295,24,296,230,4,296,3,1,300,2,290,229,300,230,174,230,300
,22,175,295,300,300,234,300,54,19,233,18,300,174,230,230,82,45,174,46,47
,296,296,238,296,95,21,20,296,300,290,237,289,96,295,295,295,295,54,299,299
,95,300,300,300,300,300,300,300,300,299,82,82,5,295,295,295,295,295,295,295
,295,295,295,295,295,295,295,295,295,9,9,197,198,199,200,201,202,203,204,205
,206,207,191,192,193,194,195,196,208,295,295,6,295,295,295,295,295,295,295,295
,295,295,77,75,37,252,75,37,252,250,75,37,249,14,75,13,288,76,38,75
,75,75,251,75,37,143,144,42,75,42,16,15,42,247,75,78,145,75,75,75
,110,75,44,75,43,75,248,43,75,109,7,109,287,75,75,56,8,75,75,75
,75,75,75,75,75,75,75,75,75,75,75,134,134,312,236,134,170,171,172,134
,266,311,34,134,56,235,134,10,134,133,134,239,134,240,265,93,303,134,35,152
,153,33,257,240,134,240,134,134,134,23,134,92,134,258,134,303,304,134,286,312
,240,240,134,134,132,267,134,134,134,134,134,134,134,134,134,134,134,134,134,134
,268,160,262,155,156,262,303,303,303,303,57,25,57,285,286,57,34,34,34,34
,34,34,34,34,34,261,303,303,303,303,303,303,303,303,303,303,303,303,303,303
,303,303,57,231,232,57,26,57,57,57,57,57,292,57,57,57,57,274,57,57
,36,39,303,303,40,303,303,303,303,303,303,303,303,303,303,159,159,159,159,159
,159,159,159,159,59,307,58,273,291,58,146,147,148,149,150,151,41,282,57,57
,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,69,269,272,60
,27,58,58,61,58,62,281,63,58,64,65,308,66,68,48,32,27,270,271,27
,108,28,313,29,30,176,31,269,31,31,294,49,50,314,51,293,52,209,210,108
,211,212,213,214,215,216,217,218,219,220,53,55,67,67,67,67,67,67,67,67
,67,67,67,67,67,67,67,67,67,67,108,108,108,108,27,27,27,27,27,27
,27,27,27,70,81,83,85,86,87,111,108,108,108,108,108,108,108,108,108,108
,108,108,108,108,108,108,88,89,111,90,107,177,177,177,177,177,177,177,177,177
,177,177,177,177,173,0,108,108,0,108,108,108,108,108,108,108,108,108,108,111
,111,111,111,178,179,180,181,182,183,184,185,186,187,188,189,190,0,0,114,111
,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,135,315,114,161,162
,163,164,165,166,167,168,169,316,0,0,0,0,0,0,0,111,111,0,111,111
,111,111,111,111,111,111,111,111,114,114,114,114,284,0,317,283,0,0,136,137
,138,139,140,141,142,318,0,117,114,114,114,114,114,114,114,114,114,114,114,114
,114,114,114,114,120,0,117,284,284,0,284,0,0,0,284,0,0,0,0,0
,0,0,0,120,114,114,0,114,114,114,114,114,114,114,114,114,114,117,117,118
,119,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,117,117,117
,117,117,117,117,117,117,117,117,117,117,117,117,117,123,120,120,120,120,120,120
,120,120,120,120,120,120,120,120,120,120,99,0,129,117,117,0,117,117,117,117
,117,117,117,117,117,117,0,0,0,99,120,120,0,120,120,120,120,120,120,120
,120,120,120,127,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,99,99,0,130,130,125,125,126,126,126,126,126,126,126,126,126,124,124,124,0
,99,99,99,99,0,0,222,0,0,0,0,0,0,99,99,99,221,0,221,131
,131,0,131,131,131,131,131,131,131,131,131,131,121,221,221,121,0,0,0,121
,0,0,0,121,0,0,0,0,121,0,121,0,121,228,0,0,0,121,227,227
,0,228,0,228,0,228,121,121,121,0,121,0,121,0,121,0,0,121,0,0
,228,228,121,121,0,0,121,121,121,121,121,121,121,121,122,122,122,122,122,122
,115,0,0,115,0,0,0,115,0,259,0,115,0,0,0,0,115,0,115,0
,115,0,100,0,0,115,0,0,0,260,0,0,259,0,115,115,115,0,115,259
,115,105,115,0,0,115,0,0,0,0,116,116,0,0,115,115,115,115,115,115
,115,116,302,0,0,0,302,243,0,244,302,244,103,104,302,302,0,302,0,244
,0,244,302,259,259,259,259,259,259,259,259,259,106,106,102,102,244,244,244,302
,79,0,0,0,0,101,101,101,0,302,302,0,302,302,302,302,302,302,302,302
,302,301,301,301,301,301,301,112,0,0,112,0,0,0,112,0,0,0,113,0
,0,0,0,112,0,112,0,112,278,0,278,0,112,277,277,0,278,0,278,0
,278,112,112,112,0,112,0,112,0,112,0,0,112,0,0,278,278,278,0,0
,0,113,113,113,113,113,113,113,80,80,80,80,80,80,80,80,80,80,80,80
,80,80,80,80,80,80,298,0,0,0,298,0,0,72,297,157,72,0,298,298
,0,298,223,0,0,0,298,224,0,0,74,275,0,0,157,0,276,0,0,0
,0,223,0,298,73,0,0,0,72,72,275,72,0,0,0,72,298,297,297,297
,297,297,297,297,0,157,157,157,157,0,157,309,223,223,223,223,0,11,0,0
,0,275,275,275,275,157,157,157,157,0,309,0,223,223,223,223,11,0,157,157
,157,275,275,275,275,223,223,223,0,0,0,0,0,84,275,275,275,91,0,0
,0,309,309,309,309,0,310,11,11,11,11,0,84,0,0,0,91,0,0,0
,0,309,309,309,309,0,0,11,11,11,11,0,0,94,309,309,309,97,0,0
,11,11,11,84,84,84,84,91,91,91,91,0,94,0,0,0,97,0,0,0
,0,0,0,84,84,84,84,91,91,91,91,0,0,98,0,0,84,84,84,158
,91,91,91,94,94,94,94,97,97,97,97,0,98,0,0,0,154,0,158,0
,0,0,0,94,94,94,94,97,97,97,97,254,0,0,0,0,94,94,94,154
,97,97,97,98,98,98,98,0,0,158,158,158,158,0,254,0,256,0,0,0
,0,253,0,98,98,98,98,0,0,158,158,158,158,0,0,0,98,98,98,256
,0,0,158,158,158,0,255,0,0,0,154,154,154,154,154,154,154,154,154,306
,0,0,0,0,0,254,254,254,254,254,254,254,254,254,0,0,0,0,0,0
,0,0,305,0,71,71,0,0,71,0,256,256,256,256,256,256,256,256,256,71
,0,226,71,226,0,0,225,225,0,0,0,226,0,226,0,0,71,71,0,0
,71,71,0,71,0,0,0,71,226,226,226,0,0,306,306,306,306,306,306,306
,306,306,245,0,246,263,246,264,0,264,280,0,280,12,246,12,246,264,279,264
,280,0,280,12,0,12,0,0,0,0,0,246,246,246,264,264,264,280,280,280
,12,12,12,17,0,17,242,0,241,0,0,0,0,17,0,17,241,0,241,0
,0,0,0,0,0,0,0,0,0,0,17,17,17,241,241,242,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0
};

private static int[] Parse_row = {0

,4,1,64,106,164,168,80,195,1155,1469,119,1499,14,213,2,257
,304,378,200,299,120,298,299,330,145,160,8,373,379,410,383,385
,409,25,425,171,268,342,461,1401,1089,119,978,427,31,424,1191,423
,422,421,438,437,438,1195,204,1231,33,1235,1271,708,900,469,398,149
,467,1003,536,876,605,622,808,691,188,540,91,284,147,1294,189,1093
,1277,259,482,111,502,10,403,435,1,309,782,1100,1417,829,2,294
,18,192,35,209,1502,945,1460,142,125,121,1309,1334,211,887,258,1463
,193,238,375,371,315,1109,1024,1466,353,588,234,132,9,308,366,1
,1079,4,935,214,1377,334,1149,182,391,545,583
,0};

private static short[] Conflict = {

0
};

private static int[] Conflict_row = {0


,0};

private static short[] Production = {0

,0,2049,-1,2050,0,2049,-2,2051,0,2049,-3,2052,0,2050,-4,46,257,2058,2053
,0,2051,46,257,258,2139,2054,0,2052,2050,259,0,2053,2141,59,2140,-6,257,-5,260
,0,2054,2143,2142,59,257,260,261,0,2055,2145,2135,263,2144,0,2056,2133,2146,264
,0,2057,2106,0,2058,258,2084,-7,2060,0,2059,2062,0,2059,2148,266
,0,2059,2077,0,2059,59,2080,0,2060,2149,0,2061,2062,-8,0,2061,2064,-8
,0,2061,2077,-8,0,2061,2079,-8,0,2061,2083,-8,0,2062,2150,267
,0,2063,2106,61,257,0,2064,2151,266,0,2065,2066,61,257,0,2066,-9,2067
,0,2066,2070,0,2066,2071,0,2066,2072,0,2066,2075,0,2066,268,0,2067,2068
,0,2067,-10,2069,2130,0,2067,-11,93,2106,269,2106,91,0,2068,-12,41,2133,40
,0,2069,-13,0,2069,93,2106,269,2106,91,0,2070,2067,271,270,0,2071,2066,271,2152,2067,272
,0,2072,258,2073,273,0,2073,2153,2074,0,2074,0,2074,2066,58,2133
,0,2075,2066,275,274,0,2075,276,0,2075,2154,277,0,2076,2159,41,2158,40
,0,2077,2160,-14,278,0,2078,-17,2066,58,-16,2133,0,2079,59,257,2058,59,2080
,0,2080,2161,257,277,0,2081,2164,41,2163,40,0,2082,2126,58,2133,2165
,0,2083,59,257,2058,2168,2167,59,2166,257,260,0,2084,2169,0,2085,2170,2086
,0,2086,0,2086,-19,2087,0,2086,2092,0,2086,2094,0,2086,2096,0,2086,2097
,0,2086,2098,0,2086,2099,0,2086,2100,0,2086,2137,0,2086,2101,0,2086,280
,0,2087,-21,2088,-20,257,0,2088,-22,2089,2090,0,2089,0,2089,-23,2113,281
,0,2089,2110,0,2090,0,2090,2090,93,2111,91,0,2090,2090,2091,46
,0,2090,2090,94,0,2091,257,0,2091,2137,0,2092,258,2093,2085,283,-24,2113,282
,0,2093,2172,2171,0,2094,258,2174,2173,2095,271,2113,286,0,2095,2085,58,2102
,0,2096,-26,258,2085,288,2113,287,0,2097,-27,2113,290,2085,289,0,2098,-28,258,2085,291
,0,2099,-31,258,2085,288,2175,-30,2113,275,-29,2113,281,257,292,0,2100,-32,258,2085,288,2090,257,294
,0,2101,2176,295,0,2102,-34,2103,2104,0,2103,-13,0,2103,-35,2103,2104,44
,0,2104,2105,2106,0,2105,0,2105,2106,269,0,2106,2177,2107,0,2107,2178,2108,2117
,0,2108,2179,2109,0,2109,257,0,2109,2132,0,2109,2127,0,2109,296
,0,2109,297,0,2109,41,2106,40,0,2109,2109,2125,0,2110,41,2180,40
,0,2111,2112,2113,0,2112,0,2112,2112,-23,2113,44,0,2113,-36,2114,2115
,0,2114,0,2114,-37,2115,2122,0,2115,2116,2118,2117,0,2116,-38,0,2116,2116,-39,2118,2123
,0,2117,0,2117,-40,43,0,2117,-41,45,0,2118,2119,-42,2120,0,2119
,0,2119,2119,2120,2124,0,2120,2121,257,0,2120,2132,0,2120,-43,2127
,0,2120,125,2128,123,2131,0,2120,296,0,2120,297,0,2120,41,2113,40
,0,2120,2120,2125,0,2120,2138,0,2121,125,2128,123,0,2121,2110,0,2121,2090
,0,2122,-44,61,0,2122,-45,298,0,2122,-46,35,0,2122,-47,60
,0,2122,-48,299,0,2122,-49,62,0,2122,-50,300,0,2122,-51,301
,0,2123,-52,43,0,2123,-53,45,0,2123,-54,302,0,2124,-55,42
,0,2124,-56,47,0,2124,-57,303,0,2124,-58,304,0,2124,-59,38
,0,2124,-60,305,0,2125,-61,306,0,2125,-62,126,0,2126,2130,2181
,0,2127,-63,307,0,2127,-64,308,0,2128,2183,0,2129,2184,2106,0,2130,-65,2131
,0,2130,257,0,2131,-66,309,0,2131,-67,310,0,2131,-68,311,0,2131,-69,312
,0,2131,-70,313,0,2131,-71,314,0,2131,-72,315,0,2131,-73,316
,0,2131,-74,317,0,2132,-75,318,0,2132,-76,319,0,2132,-77,320
,0,2133,2134,-78,257,0,2134,-13,0,2134,2134,-78,257,44,0,2135,257
,0,2135,2136,0,2136,321,0,2136,322,0,2136,323,0,2136,324,0,2136,325
,0,2136,326,0,2136,327,0,2136,328,0,2136,329,0,2136,330,0,2136,331
,0,2136,332,0,2136,333,0,2137,41,2185,2113,40,334,0,2137,41,2186,2113,40,335
,0,2137,41,2113,44,2113,40,336,0,2137,41,2113,44,2113,40,337
,0,2137,41,2113,40,338,0,2137,41,2113,40,339,0,2137,41,2113,40,323
,0,2137,41,2113,44,2113,40,324,0,2137,41,2113,40,325,0,2137,41,2113,44,2113,40,326
,0,2137,41,2113,40,327,0,2137,41,2113,40,328,0,2137,41,2113,40,329
,0,2137,41,2113,40,330,0,2137,41,2113,40,331,0,2137,41,2187,2113,44,2113,40,332
,0,2137,333,0,2137,340,0,2138,41,2113,40,341,0,2138,41,343,40,342
,0,2138,41,2113,40,344,0,2138,41,2113,40,345,0,2138,41,2113,40,346
,0,2138,41,2130,40,347,0,2138,41,2130,40,348,0,2138,41,2113,40,349
,0,2138,41,2113,40,350,0,2138,41,2130,40,351,0,2138,41,2113,40,352
,0,2138,41,2113,44,2130,40,353,0,2139,2139,2059,0,2139,0,2140,2057
,0,2140,0,2141,2141,59,2055,0,2141,0,2142,2142,59,2055,0,2142
,0,2143,59,2056,0,2143,0,2144,257,262,0,2144,0,2145,2145,2135,44
,0,2145,0,2146,265,0,2146,0,2147,2066,61,0,2147,0,2148,2148,59,2147,257
,0,2148,0,2149,2149,2061,0,2149,0,2150,2150,59,2063,0,2150,0,2151,2151,59,2065
,0,2151,0,2152,2152,2067,44,0,2152,0,2153,2153,2074,59,0,2153
,0,2154,2076,0,2154,0,2155,278,0,2155,0,2156,278,0,2156,0,2157,2157,2126,2156,44
,0,2157,0,2158,2157,2126,2155,0,2158,0,2159,2130,58,0,2159,0,2160,2160,59,2078
,0,2160,-15,0,2161,2081,0,2161,0,2162,2162,2082,59,0,2162,0,2163,2162,2082
,0,2163,0,2164,2130,58,0,2164,0,2165,278,0,2165,0,2166,2106
,0,2166,0,2167,2167,59,2055,0,2167,0,2168,59,2056,0,2168,0,2169,2085,279,-18
,0,2169,0,2170,2170,2086,59,0,2170,0,2171,2171,2085,283,-25,2113,284
,0,2171,0,2172,2085,285,0,2172,0,2173,2173,2095,124,0,2173,0,2174,2085,285
,0,2174,0,2175,2106,293,0,2175,0,2176,2113,0,2176,-33,0,2177,2107,2122
,0,2177,0,2178,2178,2108,2123,0,2178,0,2179,2179,2109,2124,0,2179
,0,2180,2111,0,2180,0,2181,271,272,0,2181,0,2182,2182,2129,44
,0,2182,0,2183,2182,2129,0,2183,0,2184,2106,269,0,2184,0,2185,2113,44
,0,2185,0,2186,2113,44,0,2186,0,2187,2113,44,0,2187
,0};

private static int[] Production_row = {0

,1,5,9,13,20,27,31,40,48,54,59,62,68,71,75,78
,82,85,89,93,97,101,105,109,114,118,123,127,130,133,136,139
,142,145,150,158,164,167,174,179,186,191,195,197,202,207,210,214
,220,225,232,239,244,250,256,267,270,274,276,280,283,286,289,292
,295,298,301,304,307,310,316,321,323,328,331,333,339,344,348,351
,354,363,367,376,381,389,396,402,417,426,430,435,438,444,448,450
,454,458,463,467,470,473,476,479,482,487,491,496,500,502,508,513
,515,520,525,528,534,536,540,544,549,551,556,560,563,567,573,576
,579,584,588,591,596,599,602,606,610,614,618,622,626,630,634,638
,642,646,650,654,658,662,666,670,674,678,682,686,690,693,697,701
,704,708,712,716,720,724,728,732,736,740,744,748,752,757,760,766
,769,772,775,778,781,784,787,790,793,796,799,802,805,808,811,818
,825,833,841,847,853,859,867,873,881,887,893,899,905,911,920,923
,926,932,938,944,950,956,962,968,974,980,986,992,1000,1004,1006,1009
,1011,1016,1018,1023,1025,1029,1031,1035,1037,1042,1044,1047,1049,1053,1055,1061
,1063,1067,1069,1074,1076,1081,1083,1088,1090,1095,1097,1100,1102,1105,1107,1110
,1112,1118,1120,1125,1127,1131,1133,1138,1141,1144,1146,1151,1153,1157,1159,1163
,1165,1168,1170,1173,1175,1180,1182,1186,1188,1193,1195,1200,1202,1210,1212,1216
,1218,1223,1225,1229,1231,1235,1237,1240,1243,1247,1249,1254,1256,1261,1263,1266
,1268,1272,1274,1279,1281,1285,1287,1291,1293,1297,1299,1303,1305,1309
,0};

private static short[] Terminal_to_index = {0

,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,58,0,0,69,0,20,21,65,53,10,54,2,66,0,0,0,0,0,0,0,0,0,0,26,6,59,14,61,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,19,35,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,41,56,72,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,1,3,4,5,7,8,9,11,12,13,15,16,18,22,23,24,25,27,28,29,30,31,32,33,34,36,37,38,39,40,42,43
,44,45,46,47,48,49,50,51,52,57,60,62,63,64,67,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86
,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118
,119,120
};

private static final short   END_OF_SLK_INPUT_ = 354;
private static final short   START_SYMBOL = 2049;

public static final int   NOT_A_SYMBOL = 0;
public static final int   NONTERMINAL_SYMBOL = 1;
public static final int   TERMINAL_SYMBOL = 2;
public static final int   ACTION_SYMBOL = 3;

public static int GetSymbolType ( short   symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0  &&  symbol < START_SYMBOL ) {
       symbol_type = TERMINAL_SYMBOL;
   } else if ( symbol < 0 ) {
       symbol_type = ACTION_SYMBOL;
   }

   return  symbol_type;
}

public static boolean IsNonterminal ( short   symbol )
{
   return ( symbol >= START_SYMBOL );
}

public static boolean IsTerminal ( short   symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

public static boolean IsAction ( short   symbol )
{
   return ( symbol < 0 );
}

public static short GetTerminalIndex ( short   token ){
 return ( Terminal_to_index [token] );
}

private static short
get_predicted_entry ( int        display,
                      SlkToken   tokens,
                      SlkLog     log,
                      short      production_number,
                      short      token,
                      int        scan_level,
                      int        depth )
{
 return  0;
}

public static void
parse ( int         display,
        SlkAction   action,
        SlkToken    tokens,
        SlkError    error,
        SlkLog      log,
        SlkTree     tree,
        short       start_symbol )
{
 short     rhs, lhs;
 short     production_number, entry, symbol, token, new_token;
 int       top, index, level;
 short[]   stack = new short[512];

 top = 511;
 stack [ top ] = 0;
 if ( start_symbol == 0 ) {
     start_symbol = START_SYMBOL;
 }
 if ( top > 0 ) { stack [--top] = start_symbol;
 } else { log.trace ("SlkParse: stack overflow\n"); return; }
 tree.make_root ( start_symbol );
 token = tokens.get();
 new_token = token;
 if ( display != 0 ) {
     log.trace ( "\n\n\t\tPARSE DERIVATION\n\n" );
 }

 for ( symbol = (stack[top] != 0  ? stack[top++] : (short) 0);  symbol != 0; ) {

     if ( symbol >= START_SYMBOL ) {

         entry = 0;
         level = 1;
         production_number = get_conditional_production ( symbol );
         if ( production_number != 0 ) {
             entry = get_predicted_entry ( display, tokens, log,
                                           production_number, token,
                                           level, 1 );
         }
         if ( entry == 0 ) {
             index = Parse_row [ symbol - (START_SYMBOL-1) ];
             index += Terminal_to_index [ token ];
             entry = Parse [ index ];
         }
         while ( entry < 0 ) {
             index = Conflict_row [-entry];
             index += Terminal_to_index [tokens.peek (level)];
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry != 0 ) {
             index = Production_row [ entry ];
             lhs = Production [ ++index ];
             if ( lhs == symbol ) {
                 rhs = Production [++index];
                 for ( ;  rhs != 0;  rhs = Production [++index] ) {
                     if ( top > 0 ) { stack [--top] = rhs;
                     } else { log.trace ("SlkParse: stack overflow\n"); return; }
                     tree.push_rhs_symbol ( rhs );
                 }
                 tree.add_rhs ();
                 if ( display != 0 ) {
                     log.trace_production ( entry );
                 }
             } else {
                 new_token = error.no_entry ( symbol, token, level-1 );
             }
         } else {                                       // no table entry
             new_token = error.no_entry ( symbol, token, level-1 );
         }

     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = tokens.get();
             new_token = token;
         } else {
             new_token = error.mismatch ( symbol, token );
         }

     } else {
         if ( display != 0 ) {
             log.trace_action ( symbol );
         }
         action.execute ( -symbol );
     }

     if ( token != new_token ) {
         if ( new_token != 0 ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }

     symbol = (stack[top] != 0  ? stack[top++] : (short) 0);
     tree.pop_current ();
 }

 if ( token != END_OF_SLK_INPUT_ ) {
     error.input_left ();
 }

}



};
