package parser;


// SlkParser.java - generated by the SLK parser generator 

public class SlkParser {

private static short get_conditional_production ( short symbol ) { return (short) 0; }

private static short[] Parse = {

0,0,294,24,295,233,4,295,3,1,299,2,98,232,299,233,225,233,299
,99,294,299,299,287,299,22,224,98,224,299,233,233,239,19,42,18,42,295,295
,42,295,224,224,238,295,299,9,9,21,20,294,294,294,294,96,298,298,286,299
,299,299,299,299,299,299,299,298,56,5,95,294,294,294,294,294,294,294,294,294
,294,294,294,294,294,294,294,55,6,200,201,202,203,204,205,206,207,208,209,210
,194,195,196,197,198,199,211,294,294,85,294,294,294,294,294,294,294,294,294,294
,79,81,37,255,81,37,255,237,81,37,49,236,81,49,78,38,81,81,81,254
,81,37,85,85,242,81,243,14,7,13,81,80,48,81,81,81,243,81,243,81
,285,81,16,15,81,173,174,175,57,81,81,243,243,81,81,81,81,81,81,81
,81,81,81,81,81,81,81,137,137,241,279,137,279,284,285,137,57,240,278,137
,279,137,279,137,136,137,253,137,44,252,43,302,137,43,267,279,279,279,137,8
,137,137,137,10,137,113,137,266,137,302,303,137,311,112,23,112,137,137,135,310
,137,137,137,137,137,137,137,137,137,137,137,137,137,137,177,25,34,250,178,302
,302,302,302,289,268,60,306,60,177,251,60,35,26,177,33,36,311,270,269,302
,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,60,271,289,60,288
,60,60,60,60,60,270,60,60,60,60,307,60,60,59,39,302,302,273,302,302
,302,302,302,302,302,302,302,302,34,34,34,34,34,34,34,34,34,146,147,61
,59,72,155,156,72,272,138,40,148,158,159,60,60,60,60,60,60,60,60,60
,60,60,60,60,60,60,60,60,60,71,234,235,62,281,72,72,63,72,64,27
,65,72,66,67,41,68,70,139,140,141,142,143,144,145,27,111,179,27,260,28
,280,29,30,45,31,293,32,46,261,47,292,212,213,111,214,215,216,217,218,219
,220,221,222,223,50,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69
,69,69,69,111,111,111,111,51,52,53,54,27,27,27,27,27,27,27,27,27
,163,58,291,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,114
,180,180,180,180,180,180,180,180,180,180,180,180,180,73,84,117,290,114,86,111
,111,88,111,111,111,111,111,111,111,111,111,111,89,117,181,182,183,184,185,186
,187,188,189,190,191,192,193,114,114,114,114,312,162,162,162,162,162,162,162,162
,162,313,90,117,117,117,117,114,114,114,114,114,114,114,114,114,114,114,114,114
,114,114,114,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,120
,91,92,93,114,114,110,114,114,114,114,114,114,114,114,114,114,123,120,176,117
,117,0,117,117,117,117,117,117,117,117,117,117,314,277,123,277,316,0,276,276
,0,277,315,277,0,277,317,120,120,121,122,149,150,151,152,153,154,0,277,277
,277,0,0,0,123,123,0,120,120,120,120,120,120,120,120,120,120,120,120,120
,120,120,120,157,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123
,126,0,0,120,120,157,120,120,120,120,120,120,120,120,120,120,11,0,132,0
,123,123,0,123,123,123,123,123,123,123,123,123,123,0,11,164,165,166,167,168
,169,170,171,172,0,0,0,0,130,131,0,0,0,0,0,157,157,157,157,157
,157,157,157,157,11,11,11,11,133,133,128,128,129,129,129,129,129,129,129,129
,129,127,127,127,11,11,11,11,0,0,0,0,0,0,0,0,0,11,11,11
,0,0,0,0,134,134,0,134,134,134,134,134,134,134,134,134,134,124,0,0
,124,229,0,229,124,0,228,228,124,0,0,229,124,229,124,0,124,0,0,0
,0,124,0,0,0,0,229,229,229,124,124,124,0,124,0,124,0,124,0,0
,124,0,0,0,0,124,124,0,0,124,124,124,124,124,124,124,124,125,125,125
,125,125,125,118,0,0,118,0,0,0,118,0,262,0,118,0,0,0,118,0
,118,0,118,0,0,0,0,118,0,0,0,263,0,0,262,118,118,118,0,118
,262,118,0,118,0,0,118,0,0,0,0,119,119,0,0,118,118,118,118,118
,118,118,119,301,0,0,246,301,247,0,247,301,0,0,301,301,0,301,247,0
,247,0,301,0,262,262,262,262,262,262,262,262,262,247,247,247,0,0,301,82
,0,0,0,0,0,0,0,0,301,301,0,301,301,301,301,301,301,301,301,301
,300,300,300,300,300,300,115,0,0,115,231,0,0,115,0,230,230,116,231,0
,231,115,231,115,0,115,0,0,0,0,115,0,0,0,0,231,231,0,115,115
,115,0,115,0,115,0,115,0,0,115,0,0,0,0,0,0,0,0,116,116
,116,116,116,116,116,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83
,83,83,83,297,0,0,0,297,0,0,77,296,160,77,297,297,0,297,226,0
,0,0,297,227,0,0,76,0,0,0,160,0,0,0,0,0,226,0,297,75
,0,0,0,77,77,0,77,0,0,0,77,297,296,296,296,296,296,296,296,274
,160,160,160,160,275,160,226,226,226,226,0,0,0,0,0,0,0,274,0,0
,160,160,160,160,308,0,226,226,226,226,0,0,0,160,160,160,0,0,0,226
,226,226,308,0,0,0,0,274,274,274,274,283,0,87,282,0,0,0,0,0
,94,0,0,0,0,0,0,274,274,274,274,87,308,308,308,308,0,309,94,0
,274,274,274,0,283,283,0,283,0,0,0,283,308,308,308,308,97,0,0,0
,100,87,87,87,87,308,308,308,94,94,94,94,0,0,97,0,0,0,100,0
,0,87,87,87,87,0,0,0,94,94,94,94,0,0,87,87,87,101,0,0
,0,94,94,94,97,97,97,97,100,100,100,100,0,0,0,101,0,0,0,0
,0,0,161,0,97,97,97,97,100,100,100,100,0,0,257,0,0,97,97,97
,161,100,100,100,0,101,101,101,101,0,0,0,0,259,0,0,257,0,0,0
,0,0,256,0,0,101,101,101,101,0,161,161,161,161,12,259,12,0,101,101
,101,258,0,0,12,0,12,0,0,0,161,161,161,161,0,0,0,102,0,12
,12,12,0,161,161,161,257,257,257,257,257,257,257,257,257,102,0,0,0,0
,74,74,103,0,74,259,259,259,259,259,259,259,259,259,74,0,305,74,0,0
,108,0,0,0,0,102,102,0,0,0,74,74,0,0,74,74,0,74,304,0
,248,74,249,0,249,102,102,102,102,0,106,107,249,17,249,17,0,0,102,102
,102,0,0,17,0,17,0,249,249,249,109,109,105,105,0,0,0,0,17,17
,17,0,0,104,104,104,0,0,305,305,305,305,305,305,305,305,305,264,0,265
,0,265,245,0,244,0,0,0,0,265,0,265,244,0,244,0,0,0,0,0
,0,0,0,0,265,265,265,244,244,245,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

private static int[] Parse_row = {0

,4,1,61,83,142,211,38,211,694,1330,133,1429,20,218,2,241
,270,377,254,255,118,292,323,359,33,206,376,378,389,126,394,445
,419,420,430,61,166,455,309,263,337,491,1377,1066,117,957,459,105
,459,1171,460,469,497,534,533,533,1178,44,1214,2,1218,1255,1355,1380
,565,393,214,477,982,493,859,577,594,793,678,184,331,285,567,272
,661,277,1070,1280,458,641,82,596,247,394,428,1,305,13,1076,797
,986,2,361,120,31,182,142,1478,924,1418,246,202,119,1292,1311,387
,870,1475,207,257,275,315,1117,609,186,369,1167,156,20,259,458,363
,1,1056,4,916,209,1394,255,1142,221,520,601,605
,0};

private static short[] Conflict = {

0
};

private static int[] Conflict_row = {0


,0};

private static short[] Production = {0

,0,2049,2050,0,2049,2051,0,2049,2052,0,2050,-1,46,257,2058,2053
,0,2051,-1,46,257,258,2142,2054,0,2052,2050,259,0,2053,2144,59,2143,-2,257,260
,0,2054,2146,2145,59,-2,257,260,261,0,2055,2148,2138,263,2147,0,2056,-4,2136,2149,264
,0,2057,2109,0,2058,-5,258,2087,2060,0,2059,2062,0,2059,2151,266
,0,2059,2079,0,2059,59,2082,0,2060,2152,0,2061,2062,0,2061,2064
,0,2061,2079,0,2061,2081,0,2061,2086,0,2062,2153,267,0,2063,-7,2109,61,257
,0,2064,2154,266,0,2065,-6,2066,61,257,0,2066,2067,0,2066,2070
,0,2066,-8,2071,0,2066,2072,0,2066,2075,0,2066,2076,0,2067,-9,2068
,0,2067,2069,2133,0,2067,93,2109,268,2109,91,0,2068,-10,41,2136,40
,0,2069,0,2069,93,2109,268,2109,91,0,2070,-11,2067,270,269,0,2071,-12,2066,270,2155,2067,271
,0,2072,258,2073,272,0,2073,2156,2074,0,2074,0,2074,2066,58,2136
,0,2075,-13,2066,274,273,0,2076,2157,275,0,2077,2078,41,2161,40
,0,2078,2133,58,0,2078,0,2079,2162,-14,276,0,2080,-16,2066,58,2136
,0,2081,59,257,2058,59,2082,0,2082,2163,-17,257,275,0,2083,-18,2084,41,2165,40
,0,2084,-19,2133,58,0,2084,0,2085,2129,58,2136,2166,0,2086,-1,59,257,2058,2169,2168,59,2167,-2,257,260
,0,2087,2170,0,2088,2171,-22,2089,0,2089,2090,0,2089,2095,0,2089,2097
,0,2089,2099,0,2089,2100,0,2089,2101,0,2089,2102,0,2089,2103,0,2089,2140
,0,2089,2104,0,2089,278,0,2089,-25,0,2090,-26,2091,257,0,2091,-27,2092,2093
,0,2092,-28,2116,279,0,2092,-29,2113,0,2092,0,2093,-30,2093,93,2114,91
,0,2093,-31,2093,2094,46,0,2093,-32,2093,94,0,2093,0,2094,-33,257
,0,2094,-34,2140,0,2095,-36,258,2096,2088,281,-35,2116,280,0,2096,2173,2172
,0,2097,-43,258,2175,2174,2098,270,2116,284,0,2098,-44,2088,58,2105
,0,2099,-46,258,2088,286,-45,2116,285,0,2100,-48,-47,2116,288,2088,287
,0,2101,-49,258,2088,289,0,2102,-53,258,2088,286,2176,-51,2116,274,-50,2116,279,257,290
,0,2103,-54,258,2088,286,2093,257,292,0,2104,2177,293,0,2105,2106,2107
,0,2106,0,2106,2106,2107,44,0,2107,2108,2109,0,2108,0,2108,2109,268
,0,2109,2178,2110,0,2110,2179,2111,2120,0,2111,2180,2112,0,2112,257
,0,2112,2135,0,2112,2130,0,2112,-56,294,0,2112,-57,295,0,2112,41,2109,40
,0,2112,2112,2128,0,2113,41,2181,40,0,2114,2115,2116,0,2115,0,2115,2115,2116,44
,0,2116,2117,2118,0,2117,0,2117,2118,2125,0,2118,2119,2121,2120,0,2119
,0,2119,2119,-58,2121,2126,0,2120,0,2120,-59,43,0,2120,-59,45
,0,2121,2122,2123,0,2122,0,2122,-60,2122,2123,2127,0,2123,2124,257
,0,2123,2135,0,2123,2130,0,2123,125,2131,123,2134,0,2123,-56,294
,0,2123,-57,295,0,2123,41,2116,40,0,2123,2123,2128,0,2123,2141
,0,2124,125,2131,123,0,2124,2113,0,2124,2093,0,2125,-61,61,0,2125,-61,296
,0,2125,-61,35,0,2125,-61,60,0,2125,-61,297,0,2125,-61,62
,0,2125,-61,298,0,2125,299,0,2126,43,0,2126,45,0,2126,300
,0,2127,42,0,2127,47,0,2127,301,0,2127,302,0,2127,38,0,2127,303
,0,2128,-59,304,0,2128,-59,126,0,2129,-62,2133,2182,0,2130,-63,305
,0,2130,-64,306,0,2131,2184,0,2132,2185,2109,0,2133,2134,0,2133,-65,257
,0,2134,-66,307,0,2134,-67,308,0,2134,-68,309,0,2134,-69,310
,0,2134,-70,311,0,2134,-71,312,0,2134,-72,313,0,2134,-73,314
,0,2134,-74,315,0,2135,-75,316,0,2135,-76,317,0,2135,-77,318
,0,2136,2137,257,0,2137,0,2137,2137,257,44,0,2138,257,0,2138,2139
,0,2139,319,0,2139,320,0,2139,321,0,2139,322,0,2139,323,0,2139,324
,0,2139,325,0,2139,326,0,2139,327,0,2139,328,0,2139,329,0,2139,330
,0,2139,331,0,2140,41,2186,2116,40,332,0,2140,41,2187,2116,40,333
,0,2140,41,2116,44,2116,40,334,0,2140,41,2116,44,2116,40,335
,0,2140,41,2116,40,336,0,2140,41,2116,40,337,0,2140,41,2116,40,321
,0,2140,41,2116,44,2116,40,322,0,2140,41,2116,40,323,0,2140,41,2116,44,2116,40,324
,0,2140,41,2116,40,325,0,2140,41,2116,40,326,0,2140,41,2116,40,327
,0,2140,41,2116,40,328,0,2140,41,2116,40,329,0,2140,41,2188,2116,44,2116,40,330
,0,2140,331,0,2140,338,0,2141,41,2116,40,339,0,2141,41,341,40,340
,0,2141,41,2116,40,342,0,2141,41,2116,40,343,0,2141,41,2116,40,344
,0,2141,41,2133,40,345,0,2141,41,2133,40,346,0,2141,41,2116,40,347
,0,2141,41,2116,40,348,0,2141,41,2133,40,349,0,2141,41,2116,40,350
,0,2141,41,2116,44,2133,40,351,0,2142,2142,2059,0,2142,0,2143,2057
,0,2143,0,2144,2144,59,2055,0,2144,0,2145,2145,59,2055,0,2145
,0,2146,59,2056,0,2146,0,2147,257,262,0,2147,0,2148,2148,2138,44
,0,2148,-3,0,2149,265,0,2149,0,2150,-6,2066,61,0,2150,0,2151,2151,59,2150,257
,0,2151,0,2152,2152,2061,0,2152,0,2153,2153,59,2063,0,2153,0,2154,2154,59,2065
,0,2154,0,2155,2155,2067,44,0,2155,0,2156,2156,2074,59,0,2156
,0,2157,2077,0,2157,0,2158,276,0,2158,0,2159,276,0,2159,0,2160,2160,2129,2159,44
,0,2160,0,2161,2160,2129,2158,0,2161,0,2162,2162,59,2080,0,2162,-15
,0,2163,2083,0,2163,0,2164,2164,2085,59,0,2164,0,2165,2164,2085
,0,2165,0,2166,-20,276,0,2166,0,2167,2057,0,2167,0,2168,2168,59,2055
,0,2168,0,2169,59,2056,0,2169,0,2170,-21,2088,277,0,2170,0,2171,2171,-23,2089,59
,0,2171,-24,0,2172,2172,-38,2088,281,-37,2116,282,0,2172,0,2173,-39,2088,283
,0,2173,-40,0,2174,2174,-41,2098,124,0,2174,0,2175,-42,2088,283
,0,2175,0,2176,-52,2109,291,0,2176,0,2177,-55,2116,0,2177,0,2178,2110,2125
,0,2178,0,2179,2179,2111,2126,0,2179,0,2180,2180,2112,2127,0,2180
,0,2181,2114,0,2181,0,2182,270,271,0,2182,0,2183,2183,2132,44
,0,2183,0,2184,2183,2132,0,2184,0,2185,2109,268,0,2185,0,2186,2116,44
,0,2186,0,2187,2116,44,0,2187,0,2188,2116,44,0,2188
,0};

private static int[] Production_row = {0

,1,4,7,10,17,25,29,37,46,52,58,61,67,70,74,77
,81,84,87,90,93,96,99,103,109,113,119,122,125,129,132,135
,138,142,146,153,159,161,168,174,182,187,191,193,198,204,208,214
,218,220,225,231,238,244,251,256,258,264,277,280,285,288,291,294
,297,300,303,306,309,312,315,318,321,326,331,336,340,342,349,355
,360,362,366,370,380,384,394,400,409,417,423,438,447,451,455,457
,462,466,468,472,476,481,485,488,491,494,498,502,507,511,516,520
,522,527,531,533,537,542,544,550,552,556,560,564,566,572,576,579
,582,588,592,596,601,605,608,613,616,619,623,627,631,635,639,643
,647,650,653,656,659,662,665,668,671,674,677,681,685,690,694,698
,701,705,708,712,716,720,724,728,732,736,740,744,748,752,756,760
,764,766,771,774,777,780,783,786,789,792,795,798,801,804,807,810
,813,816,823,830,838,846,852,858,864,872,878,886,892,898,904,910
,916,925,928,931,937,943,949,955,961,967,973,979,985,991,997,1005
,1009,1011,1014,1016,1021,1023,1028,1030,1034,1036,1040,1042,1047,1050,1053,1055
,1060,1062,1068,1070,1074,1076,1081,1083,1088,1090,1095,1097,1102,1104,1107,1109
,1112,1114,1117,1119,1125,1127,1132,1134,1139,1142,1145,1147,1152,1154,1158,1160
,1164,1166,1169,1171,1176,1178,1182,1184,1189,1191,1197,1200,1209,1211,1216,1219
,1225,1227,1232,1234,1239,1241,1245,1247,1251,1253,1258,1260,1265,1267,1270,1272
,1276,1278,1283,1285,1289,1291,1295,1297,1301,1303,1307,1309,1313
,0};

private static short[] Terminal_to_index = {0

,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,56,0,0,67,0,19,20,63,51,10,52,2,64,0,0,0,0,0,0,0,0,0,0,25,6,57,14,59,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,18,33,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,39,54,70,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,1,3,4,5,7,8,9,11,12,13,15,17,21,22,23,24,26,27,28,29,30,31,32,34,35,36,37,38,40,41,42,43
,44,45,46,47,48,49,50,55,58,60,61,62,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86
,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118

};

private static final short   END_OF_SLK_INPUT_ = 352;
private static final short   START_SYMBOL = 2049;

public static final int   NOT_A_SYMBOL = 0;
public static final int   NONTERMINAL_SYMBOL = 1;
public static final int   TERMINAL_SYMBOL = 2;
public static final int   ACTION_SYMBOL = 3;

public static int GetSymbolType ( short   symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0  &&  symbol < START_SYMBOL ) {
       symbol_type = TERMINAL_SYMBOL;
   } else if ( symbol < 0 ) {
       symbol_type = ACTION_SYMBOL;
   }

   return  symbol_type;
}

public static boolean IsNonterminal ( short   symbol )
{
   return ( symbol >= START_SYMBOL );
}

public static boolean IsTerminal ( short   symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

public static boolean IsAction ( short   symbol )
{
   return ( symbol < 0 );
}

public static short GetTerminalIndex ( short   token ){
 return ( Terminal_to_index [token] );
}

private static short
get_predicted_entry ( int        display,
                      SlkToken   tokens,
                      SlkLog     log,
                      short      production_number,
                      short      token,
                      int        scan_level,
                      int        depth )
{
 return  0;
}

public static void
parse ( int         display,
        SlkAction   action,
        SlkToken    tokens,
        SlkError    error,
        SlkLog      log,
        // Tree     tree,
        short       start_symbol )
{
 short     rhs, lhs;
 short     production_number, entry, symbol, token, new_token;
 int       top, index, level;
 short[]   stack = new short[512];

 top = 511;
 stack [ top ] = 0;
 if ( start_symbol == 0 ) {
     start_symbol = START_SYMBOL;
 }
 if ( top > 0 ) { stack [--top] = start_symbol;
 } else { log.trace ("SlkParse: stack overflow\n"); return; }
 //   make_root ( start_symbol );
 token = tokens.get();
 new_token = token;
 if ( display != 0 ) {
     log.trace ( "\n\n\t\tPARSE DERIVATION\n\n" );
 }

 for ( symbol = (stack[top] != 0  ? stack[top++] : (short) 0);  symbol != 0; ) {

     if ( symbol >= START_SYMBOL ) {

         entry = 0;
         level = 1;
         production_number = get_conditional_production ( symbol );
         if ( production_number != 0 ) {
             entry = get_predicted_entry ( display, tokens, log,
                                           production_number, token,
                                           level, 1 );
         }
         if ( entry == 0 ) {
             index = Parse_row [ symbol - (START_SYMBOL-1) ];
             index += Terminal_to_index [ token ];
             entry = Parse [ index ];
         }
         while ( entry < 0 ) {
             index = Conflict_row [-entry];
             index += Terminal_to_index [tokens.peek (level)];
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry != 0 ) {
             index = Production_row [ entry ];
             lhs = Production [ ++index ];
             if ( lhs == symbol ) {
                 rhs = Production [++index];
                 for ( ;  rhs != 0;  rhs = Production [++index] ) {
                     if ( top > 0 ) { stack [--top] = rhs;
                     } else { log.trace ("SlkParse: stack overflow\n"); return; }
                     //   push_rhs_symbol ( rhs );
                 }
                 //   add_rhs ();
                 if ( display != 0 ) {
                     log.trace_production ( entry );
                 }
             } else {
                 new_token = error.no_entry ( symbol, token, level-1 );
             }
         } else {                                       // no table entry
             new_token = error.no_entry ( symbol, token, level-1 );
         }

     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = tokens.get();
             new_token = token;
         } else {
             new_token = error.mismatch ( symbol, token );
         }

     } else {
         if ( display != 0 ) {
             log.trace_action ( symbol );
         }
         action.execute ( -symbol );
     }

     if ( token != new_token ) {
         if ( new_token != 0 ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }

     symbol = (stack[top] != 0  ? stack[top++] : (short) 0);
     //   pop_current ();
 }

 if ( token != END_OF_SLK_INPUT_ ) {
     error.input_left ();
 }

}



};
