package parser;


// SlkParser.java - generated by the SLK parser generator 

public class SlkParser {

private static short get_conditional_production ( short symbol ) { return (short) 0; }

private static short[] Parse = {

0,0,294,24,295,231,4,295,3,1,299,2,96,230,299,231,223,231,299
,97,294,299,299,287,299,22,222,96,222,299,231,231,237,19,42,18,42,295,295
,42,295,222,222,236,295,299,9,9,21,20,294,294,294,294,94,298,298,286,299
,299,299,299,299,299,299,299,298,232,233,93,294,294,294,294,294,294,294,294,294
,294,294,294,294,294,294,294,153,154,198,199,200,201,202,203,204,205,206,207,208
,192,193,194,195,196,197,209,294,294,83,294,294,294,294,294,294,294,294,294,294
,78,76,37,253,76,37,253,235,76,37,48,234,76,48,77,38,76,76,76,252
,76,37,83,83,240,76,241,14,5,13,76,79,49,76,76,76,241,76,241,76
,285,76,16,15,76,171,172,173,55,76,76,241,241,76,76,76,76,76,76,76
,76,76,76,76,76,76,76,135,135,239,279,135,279,284,285,135,55,238,278,135
,279,135,279,135,134,135,251,135,44,250,43,302,135,43,265,279,279,279,135,6
,135,135,135,7,135,111,135,264,135,302,303,135,311,110,8,110,135,135,133,310
,135,135,135,135,135,135,135,135,135,135,135,135,135,135,175,10,34,248,176,302
,302,302,302,289,266,58,306,58,175,249,58,35,23,175,33,25,311,268,267,302
,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,58,269,289,58,288
,58,58,58,58,58,268,58,58,58,58,307,58,58,57,26,302,302,273,302,302
,302,302,302,302,302,302,302,302,34,34,34,34,34,34,34,34,34,144,145,60
,57,59,156,157,59,272,136,36,146,39,40,58,58,58,58,58,58,58,58,58
,58,58,58,58,58,58,58,58,58,70,41,291,61,281,59,59,62,59,63,27
,64,59,65,66,271,67,69,137,138,139,140,141,142,143,27,109,177,27,258,28
,280,29,30,270,31,290,32,45,259,46,47,210,211,109,212,213,214,215,216,217
,218,219,220,221,50,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68
,68,68,68,109,109,109,109,51,52,53,54,27,27,27,27,27,27,27,27,27
,161,56,71,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,112
,178,178,178,178,178,178,178,178,178,178,178,178,178,293,82,115,84,112,292,109
,109,86,109,109,109,109,109,109,109,109,109,109,87,115,179,180,181,182,183,184
,185,186,187,188,189,190,191,112,112,112,112,312,160,160,160,160,160,160,160,160
,160,313,88,115,115,115,115,112,112,112,112,112,112,112,112,112,112,112,112,112
,112,112,112,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,118
,89,90,91,112,112,108,112,112,112,112,112,112,112,112,112,112,121,118,174,115
,115,0,115,115,115,115,115,115,115,115,115,115,314,277,121,277,316,0,276,276
,0,277,315,277,0,277,317,118,118,119,120,147,148,149,150,151,152,0,277,277
,277,0,0,0,121,121,0,118,118,118,118,118,118,118,118,118,118,118,118,118
,118,118,118,155,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121
,124,0,0,118,118,155,118,118,118,118,118,118,118,118,118,118,11,0,130,0
,121,121,0,121,121,121,121,121,121,121,121,121,121,0,11,162,163,164,165,166
,167,168,169,170,0,0,0,0,128,129,0,0,0,0,0,155,155,155,155,155
,155,155,155,155,11,11,11,11,131,131,126,126,127,127,127,127,127,127,127,127
,127,125,125,125,11,11,11,11,0,0,0,0,0,0,0,0,0,11,11,11
,0,0,0,0,132,132,0,132,132,132,132,132,132,132,132,132,132,122,0,0
,122,227,0,227,122,0,226,226,122,0,0,227,122,227,122,0,122,0,0,0
,0,122,0,0,0,0,227,227,227,122,122,122,0,122,0,122,0,122,0,0
,122,0,0,0,0,122,122,0,0,122,122,122,122,122,122,122,122,123,123,123
,123,123,123,116,0,0,116,0,0,0,116,0,260,0,116,0,0,0,116,0
,116,0,116,0,0,0,0,116,0,0,0,261,0,0,260,116,116,116,0,116
,260,116,0,116,0,0,116,0,0,0,0,117,117,0,0,116,116,116,116,116
,116,116,117,301,0,0,244,301,245,0,245,301,0,0,301,301,0,301,245,0
,245,0,301,0,260,260,260,260,260,260,260,260,260,245,245,245,0,0,301,80
,0,0,0,0,0,0,0,0,301,301,0,301,301,301,301,301,301,301,301,301
,300,300,300,300,300,300,113,0,0,113,229,0,0,113,0,228,228,114,229,0
,229,113,229,113,0,113,0,0,0,0,113,0,0,0,0,229,229,0,113,113
,113,0,113,0,113,0,113,0,0,113,0,0,0,0,0,0,0,0,114,114
,114,114,114,114,114,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81
,81,81,81,297,0,0,0,297,0,0,73,296,158,73,297,297,0,297,224,0
,0,0,297,225,0,0,75,0,0,0,158,0,0,0,0,0,224,0,297,74
,0,0,0,73,73,0,73,0,0,0,73,297,296,296,296,296,296,296,296,274
,158,158,158,158,275,158,224,224,224,224,0,0,0,0,0,0,0,274,0,0
,158,158,158,158,308,0,224,224,224,224,0,0,0,158,158,158,0,0,0,224
,224,224,308,0,0,0,0,274,274,274,274,283,0,85,282,0,0,0,0,0
,92,0,0,0,0,0,0,274,274,274,274,85,308,308,308,308,0,309,92,0
,274,274,274,0,283,283,0,283,0,0,0,283,308,308,308,308,95,0,0,0
,98,85,85,85,85,308,308,308,92,92,92,92,0,0,95,0,0,0,98,0
,0,85,85,85,85,0,0,0,92,92,92,92,0,0,85,85,85,99,0,0
,0,92,92,92,95,95,95,95,98,98,98,98,0,0,0,99,0,0,0,0
,0,0,159,0,95,95,95,95,98,98,98,98,0,0,255,0,0,95,95,95
,159,98,98,98,0,99,99,99,99,0,0,0,0,257,0,0,255,0,0,0
,0,0,254,0,0,99,99,99,99,0,159,159,159,159,12,257,12,0,99,99
,99,256,0,0,12,0,12,0,0,0,159,159,159,159,0,0,0,100,0,12
,12,12,0,159,159,159,255,255,255,255,255,255,255,255,255,100,0,0,0,0
,72,72,101,0,72,257,257,257,257,257,257,257,257,257,72,0,305,72,0,0
,106,0,0,0,0,100,100,0,0,0,72,72,0,0,72,72,0,72,304,0
,246,72,247,0,247,100,100,100,100,0,104,105,247,17,247,17,0,0,100,100
,100,0,0,17,0,17,0,247,247,247,107,107,103,103,0,0,0,0,17,17
,17,0,0,102,102,102,0,0,305,305,305,305,305,305,305,305,305,262,0,263
,0,263,243,0,242,0,0,0,0,263,0,263,242,0,242,0,0,0,0,0
,0,0,0,0,263,263,263,242,242,243,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

private static int[] Parse_row = {0

,4,1,140,214,217,226,38,243,694,1330,133,1429,20,256,2,261
,312,377,254,327,118,327,326,345,33,206,380,380,390,126,394,445
,419,420,430,166,455,309,263,337,460,1377,1066,117,957,459,105,457
,1171,460,469,497,534,533,533,1178,44,1214,2,1218,1255,1355,1380,565
,393,214,477,982,493,859,577,594,793,678,184,331,285,567,17,661
,270,1070,1280,458,641,82,596,247,394,428,1,305,13,1076,797,986
,2,59,120,31,182,142,1478,924,1418,246,202,119,1292,1311,387,870
,1475,207,257,275,377,315,1117,609,186,369,1167,156,20,259,367,451
,1,1056,4,916,209,1394,255,1142,221,520,601,605
,0};

private static short[] Conflict = {

0
};

private static int[] Conflict_row = {0


,0};

private static short[] Production = {0

,0,2049,2050,0,2049,2051,0,2049,2052,0,2050,-1,46,257,2058,2053
,0,2051,-1,46,257,258,2141,2054,0,2052,2050,259,0,2053,2143,59,2142,-2,257,260
,0,2054,2145,2144,59,-2,257,260,261,0,2055,2147,2137,263,2146,0,2056,2135,2148,264
,0,2057,2108,0,2058,258,2086,2060,0,2059,2062,0,2059,2150,266,0,2059,2079
,0,2059,59,2082,0,2060,2151,0,2061,2062,0,2061,2064,0,2061,2079
,0,2061,2081,0,2061,2085,0,2062,2152,267,0,2063,-4,2108,61,257
,0,2064,2153,266,0,2065,-3,2066,61,257,0,2066,2067,0,2066,2070
,0,2066,2071,0,2066,2072,0,2066,2075,0,2066,2076,0,2067,2068,0,2067,2069,2132
,0,2067,93,2108,268,2108,91,0,2068,41,2135,40,0,2069,0,2069,93,2108,268,2108,91
,0,2070,-5,2067,270,269,0,2071,2066,270,2154,2067,271,0,2072,258,2073,272
,0,2073,2155,2074,0,2074,0,2074,2066,58,2135,0,2075,-6,2066,274,273
,0,2076,2156,275,0,2077,2078,41,2160,40,0,2078,0,2078,2132,58
,0,2079,2161,-7,276,0,2080,-9,2066,58,2135,0,2081,59,257,2058,59,2082
,0,2082,2162,-10,257,275,0,2083,2165,41,2164,40,0,2084,2128,58,2135,2166
,0,2085,-1,59,257,2058,2169,2168,59,2167,-2,257,260,0,2086,2170
,0,2087,2171,2088,0,2088,0,2088,2089,0,2088,2094,0,2088,2096,0,2088,2098
,0,2088,2099,0,2088,2100,0,2088,2101,0,2088,2102,0,2088,2139,0,2088,2103
,0,2088,278,0,2089,2090,257,0,2090,2091,2092,0,2091,0,2091,2115,279
,0,2091,2112,0,2092,0,2092,2092,93,2113,91,0,2092,2092,2093,46
,0,2092,2092,94,0,2093,257,0,2093,2139,0,2094,258,2095,2087,281,2115,280
,0,2095,2173,2172,0,2096,258,2175,2174,2097,270,2115,284,0,2097,2087,58,2104
,0,2098,258,2087,286,2115,285,0,2099,2115,288,2087,287,0,2100,258,2087,289
,0,2101,258,2087,286,2176,2115,274,2115,279,257,290,0,2102,258,2087,286,2092,257,292
,0,2103,2177,293,0,2104,2105,2106,0,2105,0,2105,2105,2106,44,0,2106,2107,2108
,0,2107,0,2107,2108,268,0,2108,2178,2109,0,2109,2179,2110,2119,0,2110,2180,2111
,0,2111,257,0,2111,2134,0,2111,2129,0,2111,-12,294,0,2111,-13,295
,0,2111,41,2108,40,0,2111,2111,2127,0,2112,41,2181,40,0,2113,2114,2115
,0,2114,0,2114,2114,2115,44,0,2115,2116,2117,0,2116,0,2116,2117,2124
,0,2117,2118,2120,2119,0,2118,0,2118,2120,2125,0,2119,0,2119,43
,0,2119,45,0,2120,2121,2122,0,2121,0,2121,2121,2122,2126,0,2122,2123,257
,0,2122,2134,0,2122,2129,0,2122,125,2130,123,2133,0,2122,-12,294
,0,2122,-13,295,0,2122,41,2115,40,0,2122,2122,2127,0,2122,2140
,0,2123,125,2130,123,0,2123,2112,0,2123,2092,0,2124,61,0,2124,296
,0,2124,35,0,2124,60,0,2124,297,0,2124,62,0,2124,298,0,2124,299
,0,2125,43,0,2125,45,0,2125,300,0,2126,42,0,2126,47,0,2126,301
,0,2126,302,0,2126,38,0,2126,303,0,2127,304,0,2127,126,0,2128,2132,2182
,0,2129,-14,305,0,2129,-15,306,0,2130,2184,0,2131,2185,2108,0,2132,2133
,0,2132,-16,257,0,2133,-17,307,0,2133,-18,308,0,2133,-19,309
,0,2133,-20,310,0,2133,-21,311,0,2133,-22,312,0,2133,-23,313
,0,2133,-24,314,0,2133,-25,315,0,2134,-26,316,0,2134,-27,317
,0,2134,-28,318,0,2135,2136,257,0,2136,0,2136,2136,257,44,0,2137,257
,0,2137,2138,0,2138,319,0,2138,320,0,2138,321,0,2138,322,0,2138,323
,0,2138,324,0,2138,325,0,2138,326,0,2138,327,0,2138,328,0,2138,329
,0,2138,330,0,2138,331,0,2139,41,2186,2115,40,332,0,2139,41,2187,2115,40,333
,0,2139,41,2115,44,2115,40,334,0,2139,41,2115,44,2115,40,335
,0,2139,41,2115,40,336,0,2139,41,2115,40,337,0,2139,41,2115,40,321
,0,2139,41,2115,44,2115,40,322,0,2139,41,2115,40,323,0,2139,41,2115,44,2115,40,324
,0,2139,41,2115,40,325,0,2139,41,2115,40,326,0,2139,41,2115,40,327
,0,2139,41,2115,40,328,0,2139,41,2115,40,329,0,2139,41,2188,2115,44,2115,40,330
,0,2139,331,0,2139,338,0,2140,41,2115,40,339,0,2140,41,341,40,340
,0,2140,41,2115,40,342,0,2140,41,2115,40,343,0,2140,41,2115,40,344
,0,2140,41,2132,40,345,0,2140,41,2132,40,346,0,2140,41,2115,40,347
,0,2140,41,2115,40,348,0,2140,41,2132,40,349,0,2140,41,2115,40,350
,0,2140,41,2115,44,2132,40,351,0,2141,2141,2059,0,2141,0,2142,2057
,0,2142,0,2143,2143,59,2055,0,2143,0,2144,2144,59,2055,0,2144
,0,2145,59,2056,0,2145,0,2146,257,262,0,2146,0,2147,2147,2137,44
,0,2147,0,2148,265,0,2148,0,2149,-3,2066,61,0,2149,0,2150,2150,59,2149,257
,0,2150,0,2151,2151,2061,0,2151,0,2152,2152,59,2063,0,2152,0,2153,2153,59,2065
,0,2153,0,2154,2154,2067,44,0,2154,0,2155,2155,2074,59,0,2155
,0,2156,2077,0,2156,0,2157,276,0,2157,0,2158,276,0,2158,0,2159,2159,2128,2158,44
,0,2159,0,2160,2159,2128,2157,0,2160,0,2161,2161,59,2080,0,2161,-8
,0,2162,2083,0,2162,-11,0,2163,2163,2084,59,0,2163,0,2164,2163,2084
,0,2164,0,2165,2132,58,0,2165,0,2166,276,0,2166,0,2167,2057
,0,2167,0,2168,2168,59,2055,0,2168,0,2169,59,2056,0,2169,0,2170,2087,277
,0,2170,0,2171,2171,2088,59,0,2171,0,2172,2172,2087,281,2115,282
,0,2172,0,2173,2087,283,0,2173,0,2174,2174,2097,124,0,2174,0,2175,2087,283
,0,2175,0,2176,2108,291,0,2176,0,2177,2115,0,2177,0,2178,2109,2124
,0,2178,0,2179,2179,2110,2125,0,2179,0,2180,2180,2111,2126,0,2180
,0,2181,2113,0,2181,0,2182,270,271,0,2182,0,2183,2183,2131,44
,0,2183,0,2184,2183,2131,0,2184,0,2185,2108,268,0,2185,0,2186,2115,44
,0,2186,0,2187,2115,44,0,2187,0,2188,2115,44,0,2188
,0};

private static int[] Production_row = {0

,1,4,7,10,17,25,29,37,46,52,57,60,65,68,72,75
,79,82,85,88,91,94,97,101,107,111,117,120,123,126,129,132
,135,138,142,149,154,156,163,169,176,181,185,187,192,198,202,208
,210,214,219,225,232,238,244,250,263,266,270,272,275,278,281,284
,287,290,293,296,299,302,305,309,313,315,319,322,324,330,335,339
,342,345,353,357,366,371,378,384,389,401,409,413,417,419,424,428
,430,434,438,443,447,450,453,456,460,464,469,473,478,482,484,489
,493,495,499,504,506,510,512,515,518,522,524,529,533,536,539,545
,549,553,558,562,565,570,573,576,579,582,585,588,591,594,597,600
,603,606,609,612,615,618,621,624,627,630,633,637,641,645,648,652
,655,659,663,667,671,675,679,683,687,691,695,699,703,707,711,713
,718,721,724,727,730,733,736,739,742,745,748,751,754,757,760,763
,770,777,785,793,799,805,811,819,825,833,839,845,851,857,863,872
,875,878,884,890,896,902,908,914,920,926,932,938,944,952,956,958
,961,963,968,970,975,977,981,983,987,989,994,996,999,1001,1006,1008
,1014,1016,1020,1022,1027,1029,1034,1036,1041,1043,1048,1050,1053,1055,1058,1060
,1063,1065,1071,1073,1078,1080,1085,1088,1091,1094,1099,1101,1105,1107,1111,1113
,1116,1118,1121,1123,1128,1130,1134,1136,1140,1142,1147,1149,1156,1158,1162,1164
,1169,1171,1175,1177,1181,1183,1186,1188,1192,1194,1199,1201,1206,1208,1211,1213
,1217,1219,1224,1226,1230,1232,1236,1238,1242,1244,1248,1250,1254
,0};

private static short[] Terminal_to_index = {0

,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,56,0,0,67,0,19,20,63,51,10,52,2,64,0,0,0,0,0,0,0,0,0,0,25,6,57,14,59,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,18,33,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,39,54,70,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,1,3,4,5,7,8,9,11,12,13,15,17,21,22,23,24,26,27,28,29,30,31,32,34,35,36,37,38,40,41,42,43
,44,45,46,47,48,49,50,55,58,60,61,62,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86
,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118

};

private static final short   END_OF_SLK_INPUT_ = 352;
private static final short   START_SYMBOL = 2049;

public static final int   NOT_A_SYMBOL = 0;
public static final int   NONTERMINAL_SYMBOL = 1;
public static final int   TERMINAL_SYMBOL = 2;
public static final int   ACTION_SYMBOL = 3;

public static int GetSymbolType ( short   symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0  &&  symbol < START_SYMBOL ) {
       symbol_type = TERMINAL_SYMBOL;
   } else if ( symbol < 0 ) {
       symbol_type = ACTION_SYMBOL;
   }

   return  symbol_type;
}

public static boolean IsNonterminal ( short   symbol )
{
   return ( symbol >= START_SYMBOL );
}

public static boolean IsTerminal ( short   symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

public static boolean IsAction ( short   symbol )
{
   return ( symbol < 0 );
}

public static short GetTerminalIndex ( short   token ){
 return ( Terminal_to_index [token] );
}

private static short
get_predicted_entry ( int        display,
                      SlkToken   tokens,
                      SlkLog     log,
                      short      production_number,
                      short      token,
                      int        scan_level,
                      int        depth )
{
 return  0;
}

public static void
parse ( int         display,
        SlkAction   action,
        SlkToken    tokens,
        SlkError    error,
        SlkLog      log,
        // Tree     tree,
        short       start_symbol )
{
 short     rhs, lhs;
 short     production_number, entry, symbol, token, new_token;
 int       top, index, level;
 short[]   stack = new short[512];

 top = 511;
 stack [ top ] = 0;
 if ( start_symbol == 0 ) {
     start_symbol = START_SYMBOL;
 }
 if ( top > 0 ) { stack [--top] = start_symbol;
 } else { log.trace ("SlkParse: stack overflow\n"); return; }
 //   make_root ( start_symbol );
 token = tokens.get();
 new_token = token;
 if ( display != 0 ) {
     log.trace ( "\n\n\t\tPARSE DERIVATION\n\n" );
 }

 for ( symbol = (stack[top] != 0  ? stack[top++] : (short) 0);  symbol != 0; ) {

     if ( symbol >= START_SYMBOL ) {

         entry = 0;
         level = 1;
         production_number = get_conditional_production ( symbol );
         if ( production_number != 0 ) {
             entry = get_predicted_entry ( display, tokens, log,
                                           production_number, token,
                                           level, 1 );
         }
         if ( entry == 0 ) {
             index = Parse_row [ symbol - (START_SYMBOL-1) ];
             index += Terminal_to_index [ token ];
             entry = Parse [ index ];
         }
         while ( entry < 0 ) {
             index = Conflict_row [-entry];
             index += Terminal_to_index [tokens.peek (level)];
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry != 0 ) {
             index = Production_row [ entry ];
             lhs = Production [ ++index ];
             if ( lhs == symbol ) {
                 rhs = Production [++index];
                 for ( ;  rhs != 0;  rhs = Production [++index] ) {
                     if ( top > 0 ) { stack [--top] = rhs;
                     } else { log.trace ("SlkParse: stack overflow\n"); return; }
                     //   push_rhs_symbol ( rhs );
                 }
                 //   add_rhs ();
                 if ( display != 0 ) {
                     log.trace_production ( entry );
                 }
             } else {
                 new_token = error.no_entry ( symbol, token, level-1 );
             }
         } else {                                       // no table entry
             new_token = error.no_entry ( symbol, token, level-1 );
         }

     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = tokens.get();
             new_token = token;
         } else {
             new_token = error.mismatch ( symbol, token );
         }

     } else {
         if ( display != 0 ) {
             log.trace_action ( symbol );
         }
         action.execute ( -symbol );
     }

     if ( token != new_token ) {
         if ( new_token != 0 ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }

     symbol = (stack[top] != 0  ? stack[top++] : (short) 0);
     //   pop_current ();
 }

 if ( token != END_OF_SLK_INPUT_ ) {
     error.input_left ();
 }

}



};
