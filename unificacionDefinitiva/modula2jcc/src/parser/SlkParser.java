package parser;


// SlkParser.java - generated by the SLK parser generator 

public class SlkParser {

private static short get_conditional_production ( short symbol ) { return (short) 0; }

private static short[] Parse = {

0,0,295,24,296,234,4,296,3,1,300,2,100,233,300,234,226,234,300
,99,295,300,300,288,300,22,225,100,225,300,234,234,240,19,42,18,42,296,296
,42,296,225,225,239,296,300,9,9,21,20,295,295,295,295,96,299,299,287,300
,300,300,300,300,300,300,300,299,57,5,97,295,295,295,295,295,295,295,295,295
,295,295,295,295,295,295,295,56,6,201,202,203,204,205,206,207,208,209,210,211
,195,196,197,198,199,200,212,295,295,86,295,295,295,295,295,295,295,295,295,295
,80,82,38,256,82,38,256,238,82,38,49,237,82,49,79,37,82,82,82,255
,82,38,86,86,243,82,244,14,7,13,82,81,48,82,82,82,244,82,244,82
,286,82,16,15,82,174,175,176,58,82,82,244,244,82,82,82,82,82,82,82
,82,82,82,82,82,82,82,138,138,242,280,138,280,285,286,138,58,241,279,138
,280,138,280,138,137,138,268,138,43,51,44,303,138,44,52,280,280,280,138,267
,138,138,138,8,138,113,138,274,138,303,304,138,312,114,10,114,138,138,136,311
,138,138,138,138,138,138,138,138,138,138,138,138,138,138,179,273,34,251,178,303
,303,303,303,290,269,61,307,61,179,252,61,35,254,179,33,253,312,271,270,303
,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,61,272,290,61,289
,61,61,61,61,61,271,61,61,61,61,308,61,61,60,23,303,303,25,303,303
,303,303,303,303,303,303,303,303,34,34,34,34,34,34,34,34,34,147,148,62
,60,73,156,157,73,26,139,36,149,159,160,61,61,61,61,61,61,61,61,61
,61,61,61,61,61,61,61,61,61,72,235,236,63,282,73,73,64,73,65,27
,66,73,67,68,39,69,71,140,141,142,143,144,145,146,27,112,180,27,261,28
,281,29,30,40,31,294,32,41,262,45,293,213,214,112,215,216,217,218,219,220
,221,222,223,224,46,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70
,70,70,70,112,112,112,112,47,50,53,54,27,27,27,27,27,27,27,27,27
,164,55,292,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,115
,181,181,181,181,181,181,181,181,181,181,181,181,181,59,74,118,291,115,85,112
,112,87,112,112,112,112,112,112,112,112,112,112,89,118,182,183,184,185,186,187
,188,189,190,191,192,193,194,115,115,115,115,313,163,163,163,163,163,163,163,163
,163,314,90,118,118,118,118,115,115,115,115,115,115,115,115,115,115,115,115,115
,115,115,115,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,123
,91,92,93,115,115,94,115,115,115,115,115,115,115,115,115,115,124,123,111,118
,118,177,118,118,118,118,118,118,118,118,118,118,315,278,124,278,317,0,277,277
,0,278,316,278,0,278,318,123,123,121,122,150,151,152,153,154,155,0,278,278
,278,0,0,0,124,124,0,123,123,123,123,123,123,123,123,123,123,123,123,123
,123,123,123,158,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124
,127,0,0,123,123,158,123,123,123,123,123,123,123,123,123,123,11,0,133,0
,124,124,0,124,124,124,124,124,124,124,124,124,124,0,11,165,166,167,168,169
,170,171,172,173,0,0,0,0,131,132,0,0,0,0,0,158,158,158,158,158
,158,158,158,158,11,11,11,11,134,134,129,129,130,130,130,130,130,130,130,130
,130,128,128,128,11,11,11,11,0,0,0,0,0,0,0,0,0,11,11,11
,0,0,0,0,135,135,0,135,135,135,135,135,135,135,135,135,135,126,0,0
,126,230,0,230,126,0,229,229,126,0,0,230,126,230,126,0,126,0,0,0
,0,126,0,0,0,0,230,230,230,126,126,126,0,126,0,126,0,126,0,0
,126,0,0,0,0,126,126,0,0,126,126,126,126,126,126,126,126,125,125,125
,125,125,125,120,0,0,120,0,0,0,120,0,263,0,120,0,0,0,120,0
,120,0,120,0,0,0,0,120,0,0,0,264,0,0,263,120,120,120,0,120
,263,120,0,120,0,0,120,0,0,0,0,119,119,0,0,120,120,120,120,120
,120,120,119,302,0,0,247,302,248,0,248,302,0,0,302,302,0,302,248,0
,248,0,302,0,263,263,263,263,263,263,263,263,263,248,248,248,0,0,302,83
,0,0,0,0,0,0,0,0,302,302,0,302,302,302,302,302,302,302,302,302
,301,301,301,301,301,301,117,0,0,117,232,0,0,117,0,231,231,116,232,0
,232,117,232,117,0,117,0,0,0,0,117,0,0,0,0,232,232,0,117,117
,117,0,117,0,117,0,117,0,0,117,0,0,0,0,0,0,0,0,116,116
,116,116,116,116,116,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84
,84,84,84,298,0,0,0,298,0,0,78,297,161,78,298,298,0,298,227,0
,0,0,298,228,0,0,77,0,0,0,161,0,0,0,0,0,227,0,298,76
,0,0,0,78,78,0,78,0,0,0,78,298,297,297,297,297,297,297,297,275
,161,161,161,161,276,161,227,227,227,227,0,0,0,0,0,0,0,275,0,0
,161,161,161,161,309,0,227,227,227,227,0,0,0,161,161,161,0,0,0,227
,227,227,309,0,0,0,0,275,275,275,275,284,0,88,283,0,0,0,0,0
,95,0,0,0,0,0,0,275,275,275,275,88,309,309,309,309,0,310,95,0
,275,275,275,0,284,284,0,284,0,0,0,284,309,309,309,309,98,0,0,0
,101,88,88,88,88,309,309,309,95,95,95,95,0,0,98,0,0,0,101,0
,0,88,88,88,88,0,0,0,95,95,95,95,0,0,88,88,88,102,0,0
,0,95,95,95,98,98,98,98,101,101,101,101,0,0,0,102,0,0,0,0
,0,0,162,0,98,98,98,98,101,101,101,101,0,0,258,0,0,98,98,98
,162,101,101,101,0,102,102,102,102,0,0,0,0,260,0,0,258,0,0,0
,0,0,257,0,0,102,102,102,102,0,162,162,162,162,12,260,12,0,102,102
,102,259,0,0,12,0,12,0,0,0,162,162,162,162,0,0,0,103,0,12
,12,12,0,162,162,162,258,258,258,258,258,258,258,258,258,103,0,0,0,0
,75,75,104,0,75,260,260,260,260,260,260,260,260,260,75,0,306,75,0,0
,109,0,0,0,0,103,103,0,0,0,75,75,0,0,75,75,0,75,305,0
,0,75,0,0,0,103,103,103,103,0,107,108,265,0,266,0,266,265,103,103
,103,0,0,0,266,0,266,0,0,0,110,110,106,106,0,0,0,0,0,266
,266,266,0,105,105,105,0,0,306,306,306,306,306,306,306,306,306,249,0,250
,0,250,17,0,17,246,0,245,0,250,0,250,17,0,17,245,0,245,0,0
,0,0,0,0,250,250,250,17,17,17,245,245,246,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0
};

private static int[] Parse_row = {0

,4,1,61,83,142,215,38,222,694,1330,133,1478,20,298,2,303
,343,377,254,327,118,362,379,382,33,206,382,395,427,126,418,207
,420,421,441,61,166,487,309,263,337,492,1377,1066,117,957,463,105
,462,1171,471,499,535,535,534,536,1178,44,1214,2,1218,1255,1355,1380
,578,393,214,477,982,493,859,577,594,793,678,184,331,285,567,272
,661,277,1070,1280,458,641,82,599,247,394,428,1,305,13,1076,797
,986,2,361,120,31,182,142,1481,924,1475,246,268,119,1292,1311,387
,870,1430,199,257,275,225,1117,609,186,369,1167,156,20,259,458,363
,1,1056,4,916,209,1394,255,1142,221,520,601,605
,0};

private static short[] Conflict = {

0
};

private static int[] Conflict_row = {0


,0};

private static short[] Production = {0

,0,2049,2050,0,2049,2051,0,2049,2052,0,2050,-1,46,257,2058,2053
,0,2051,-1,46,257,258,2142,2054,0,2052,2050,259,0,2053,2144,59,2143,-2,257,260
,0,2054,2146,2145,59,-2,257,260,261,0,2055,2148,2138,263,2147,0,2056,-4,2136,2149,264
,0,2057,2109,0,2058,-5,258,2087,2060,0,2059,2062,0,2059,2151,266
,0,2059,2079,0,2059,59,2082,0,2060,2152,0,2061,2062,0,2061,2064
,0,2061,2079,0,2061,2081,0,2061,2086,0,2062,2153,267,0,2063,-7,2109,61,257
,0,2064,2154,266,0,2065,-6,2066,61,257,0,2066,2067,0,2066,2070
,0,2066,-8,2071,0,2066,2072,0,2066,2075,0,2066,2076,0,2067,-9,2068
,0,2067,2069,2133,0,2067,93,2109,268,2109,91,0,2068,-10,41,2136,40
,0,2069,93,2109,268,2109,91,0,2069,0,2070,-11,2067,270,269,0,2071,-12,2066,270,2155,2067,271
,0,2072,258,2073,272,0,2073,2156,2074,0,2074,2066,58,2136,0,2074
,0,2075,-13,2066,274,273,0,2076,2157,275,0,2077,2078,41,2161,40
,0,2078,2133,58,0,2078,0,2079,2162,-14,276,0,2080,-16,2066,58,2136
,0,2080,0,2081,59,257,2058,59,2082,0,2082,2163,-17,257,275,0,2083,-18,2084,41,2165,40
,0,2084,-19,2133,58,0,2084,0,2085,2129,58,2136,2166,0,2086,-1,59,257,2058,2169,2168,59,2167,-2,257,260
,0,2087,2170,0,2088,2171,-22,2089,0,2089,2090,0,2089,2095,0,2089,2097
,0,2089,2099,0,2089,2100,0,2089,2101,0,2089,2102,0,2089,2103,0,2089,2140
,0,2089,2104,0,2089,-25,278,0,2089,-26,0,2090,-27,2091,257,0,2091,-28,2092,2093
,0,2092,-29,2116,279,0,2092,-30,2113,0,2092,0,2093,-31,2093,93,2114,91
,0,2093,-32,2093,2094,46,0,2093,-33,2093,94,0,2093,0,2094,-34,257
,0,2094,-35,2140,0,2095,-37,258,2096,2088,281,-36,2116,280,0,2096,2173,2172
,0,2097,-44,258,2175,2174,2098,270,2116,284,0,2098,-45,2088,58,2105
,0,2099,-47,258,2088,286,-46,2116,285,0,2100,-50,-49,2116,288,2088,-48,287
,0,2101,-52,258,2088,-51,289,0,2102,-56,258,2088,286,2176,-54,2116,274,-53,2116,279,257,290
,0,2103,-57,258,2088,286,2093,257,292,0,2104,2177,293,0,2105,2106,2107
,0,2106,2106,2107,44,0,2106,0,2107,2108,2109,0,2108,2109,268,0,2108
,0,2109,2178,2110,0,2110,2179,2111,2120,0,2111,2180,2112,0,2112,257
,0,2112,2135,0,2112,2130,0,2112,-60,294,0,2112,-61,295,0,2112,41,2109,40
,0,2112,2112,2128,0,2113,41,2181,40,0,2114,2115,2116,0,2115,2115,2116,44
,0,2115,0,2116,2117,2118,0,2117,-59,2118,2125,0,2117,0,2118,2119,2121,2120
,0,2119,2119,-62,2121,2126,0,2119,0,2120,-63,43,0,2120,-63,45
,0,2120,0,2121,2122,2123,0,2122,-64,2122,2123,2127,0,2122,0,2123,2124,257
,0,2123,2135,0,2123,2130,0,2123,125,2131,123,2134,0,2123,-60,294
,0,2123,-61,295,0,2123,41,2116,40,0,2123,2123,2128,0,2123,2141
,0,2124,125,2131,123,0,2124,2113,0,2124,2093,0,2125,61,0,2125,296
,0,2125,35,0,2125,60,0,2125,297,0,2125,62,0,2125,298,0,2125,299
,0,2126,43,0,2126,45,0,2126,300,0,2127,42,0,2127,47,0,2127,301
,0,2127,302,0,2127,38,0,2127,303,0,2128,-63,304,0,2128,-63,126
,0,2129,-65,2133,2182,0,2130,-66,305,0,2130,-67,306,0,2131,2184
,0,2132,2185,2109,0,2133,2134,0,2133,-68,257,0,2134,-69,307,0,2134,-70,308
,0,2134,-71,309,0,2134,-72,310,0,2134,-73,311,0,2134,-74,312
,0,2134,-75,313,0,2134,-76,314,0,2134,-77,315,0,2135,-78,316
,0,2135,-79,317,0,2135,-80,318,0,2136,2137,257,0,2137,2137,257,44
,0,2137,0,2138,257,0,2138,2139,0,2139,319,0,2139,320,0,2139,321
,0,2139,322,0,2139,323,0,2139,324,0,2139,325,0,2139,326,0,2139,327
,0,2139,328,0,2139,329,0,2139,330,0,2139,331,0,2140,41,2186,2116,40,332
,0,2140,41,2187,2116,40,333,0,2140,41,2116,44,2116,40,334,0,2140,41,2116,44,2116,40,335
,0,2140,41,2116,40,336,0,2140,41,2116,40,337,0,2140,41,2116,40,321
,0,2140,41,2116,44,2116,40,322,0,2140,41,2116,40,323,0,2140,41,2116,44,2116,40,324
,0,2140,41,2116,40,325,0,2140,41,2116,40,326,0,2140,41,2116,40,327
,0,2140,41,2116,40,328,0,2140,41,2116,40,329,0,2140,41,2188,2116,44,2116,40,330
,0,2140,331,0,2140,338,0,2141,41,2116,40,339,0,2141,41,341,40,340
,0,2141,41,2116,40,342,0,2141,41,2116,40,343,0,2141,41,2116,40,344
,0,2141,41,2133,40,345,0,2141,41,2133,40,346,0,2141,41,2116,40,347
,0,2141,41,2116,40,348,0,2141,41,2133,40,349,0,2141,41,2116,40,350
,0,2141,41,2116,44,2133,40,351,0,2142,2142,2059,0,2142,0,2143,2057
,0,2143,0,2144,2144,59,2055,0,2144,0,2145,2145,59,2055,0,2145
,0,2146,59,2056,0,2146,0,2147,257,262,0,2147,0,2148,2148,2138,44
,0,2148,-3,0,2149,265,0,2149,0,2150,-6,2066,61,0,2150,0,2151,2151,59,2150,257
,0,2151,0,2152,2152,2061,0,2152,0,2153,2153,59,2063,0,2153,0,2154,2154,59,2065
,0,2154,0,2155,2155,2067,44,0,2155,0,2156,2156,2074,59,0,2156
,0,2157,2077,0,2157,0,2158,276,0,2158,0,2159,276,0,2159,0,2160,2160,2129,2159,44
,0,2160,0,2161,2160,2129,2158,0,2161,0,2162,2162,59,2080,0,2162,-15
,0,2163,2083,0,2163,0,2164,2164,2085,59,0,2164,0,2165,2164,2085
,0,2165,0,2166,-20,276,0,2166,0,2167,2057,0,2167,0,2168,2168,59,2055
,0,2168,0,2169,59,2056,0,2169,0,2170,-21,2088,277,0,2170,0,2171,2171,-23,2089,59
,0,2171,-24,0,2172,2172,-39,2088,281,-38,2116,282,0,2172,0,2173,-40,2088,283
,0,2173,-41,0,2174,2174,-42,2098,124,0,2174,0,2175,-43,2088,283
,0,2175,0,2176,-55,2109,291,0,2176,0,2177,-58,2116,0,2177,0,2178,-59,2110,2125
,0,2178,0,2179,2179,2111,2126,0,2179,0,2180,2180,2112,2127,0,2180
,0,2181,2114,0,2181,0,2182,270,271,0,2182,0,2183,2183,2132,44
,0,2183,0,2184,2183,2132,0,2184,0,2185,2109,268,0,2185,0,2186,2116,44
,0,2186,0,2187,2116,44,0,2187,0,2188,2116,44,0,2188
,0};

private static int[] Production_row = {0

,1,4,7,10,17,25,29,37,46,52,58,61,67,70,74,77
,81,84,87,90,93,96,99,103,109,113,119,122,125,129,132,135
,138,142,146,153,159,166,168,174,182,187,191,196,198,204,208,214
,218,220,225,231,233,240,246,253,258,260,266,279,282,287,290,293
,296,299,302,305,308,311,314,317,321,324,329,334,339,343,345,352
,358,363,365,369,373,383,387,397,403,412,421,428,443,452,456,460
,465,467,471,475,477,481,486,490,493,496,499,503,507,512,516,521
,525,530,532,536,541,543,548,554,556,560,564,566,570,576,578,582
,585,588,594,598,602,607,611,614,619,622,625,628,631,634,637,640
,643,646,649,652,655,658,661,664,667,670,673,676,680,684,689,693
,697,700,704,707,711,715,719,723,727,731,735,739,743,747,751,755
,759,763,768,770,773,776,779,782,785,788,791,794,797,800,803,806
,809,812,815,822,829,837,845,851,857,863,871,877,885,891,897,903
,909,915,924,927,930,936,942,948,954,960,966,972,978,984,990,996
,1004,1008,1010,1013,1015,1020,1022,1027,1029,1033,1035,1039,1041,1046,1049,1052
,1054,1059,1061,1067,1069,1073,1075,1080,1082,1087,1089,1094,1096,1101,1103,1106
,1108,1111,1113,1116,1118,1124,1126,1131,1133,1138,1141,1144,1146,1151,1153,1157
,1159,1163,1165,1168,1170,1175,1177,1181,1183,1188,1190,1196,1199,1208,1210,1215
,1218,1224,1226,1231,1233,1238,1240,1244,1246,1251,1253,1258,1260,1265,1267,1270
,1272,1276,1278,1283,1285,1289,1291,1295,1297,1301,1303,1307,1309,1313
,0};

private static short[] Terminal_to_index = {0

,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,56,0,0,67,0,19,20,63,51,10,52,2,64,0,0,0,0,0,0,0,0,0,0,25,6,57,14,59,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,18,33,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,39,54,70,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,1,3,4,5,7,8,9,11,12,13,15,17,21,22,23,24,26,27,28,29,30,31,32,34,35,36,37,38,40,41,42,43
,44,45,46,47,48,49,50,55,58,60,61,62,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86
,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118

};

private static final short   END_OF_SLK_INPUT_ = 352;
private static final short   START_SYMBOL = 2049;

public static final int   NOT_A_SYMBOL = 0;
public static final int   NONTERMINAL_SYMBOL = 1;
public static final int   TERMINAL_SYMBOL = 2;
public static final int   ACTION_SYMBOL = 3;

public static int GetSymbolType ( short   symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0  &&  symbol < START_SYMBOL ) {
       symbol_type = TERMINAL_SYMBOL;
   } else if ( symbol < 0 ) {
       symbol_type = ACTION_SYMBOL;
   }

   return  symbol_type;
}

public static boolean IsNonterminal ( short   symbol )
{
   return ( symbol >= START_SYMBOL );
}

public static boolean IsTerminal ( short   symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

public static boolean IsAction ( short   symbol )
{
   return ( symbol < 0 );
}

public static short GetTerminalIndex ( short   token ){
 return ( Terminal_to_index [token] );
}

private static short
get_predicted_entry ( int        display,
                      SlkToken   tokens,
                      SlkLog     log,
                      short      production_number,
                      short      token,
                      int        scan_level,
                      int        depth )
{
 return  0;
}

public static void
parse ( int         display,
        SlkAction   action,
        SlkToken    tokens,
        SlkError    error,
        SlkLog      log,
        // Tree     tree,
        short       start_symbol )
{
 short     rhs, lhs;
 short     production_number, entry, symbol, token, new_token;
 int       top, index, level;
 short[]   stack = new short[512];

 top = 511;
 stack [ top ] = 0;
 if ( start_symbol == 0 ) {
     start_symbol = START_SYMBOL;
 }
 if ( top > 0 ) { stack [--top] = start_symbol;
 } else { log.trace ("SlkParse: stack overflow\n"); return; }
 //   make_root ( start_symbol );
 token = tokens.get();
 new_token = token;
 if ( display != 0 ) {
     log.trace ( "\n\n\t\tPARSE DERIVATION\n\n" );
 }

 for ( symbol = (stack[top] != 0  ? stack[top++] : (short) 0);  symbol != 0; ) {

     if ( symbol >= START_SYMBOL ) {

         entry = 0;
         level = 1;
         production_number = get_conditional_production ( symbol );
         if ( production_number != 0 ) {
             entry = get_predicted_entry ( display, tokens, log,
                                           production_number, token,
                                           level, 1 );
         }
         if ( entry == 0 ) {
             index = Parse_row [ symbol - (START_SYMBOL-1) ];
             index += Terminal_to_index [ token ];
             entry = Parse [ index ];
         }
         while ( entry < 0 ) {
             index = Conflict_row [-entry];
             index += Terminal_to_index [tokens.peek (level)];
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry != 0 ) {
             index = Production_row [ entry ];
             lhs = Production [ ++index ];
             if ( lhs == symbol ) {
                 rhs = Production [++index];
                 for ( ;  rhs != 0;  rhs = Production [++index] ) {
                     if ( top > 0 ) { stack [--top] = rhs;
                     } else { log.trace ("SlkParse: stack overflow\n"); return; }
                     //   push_rhs_symbol ( rhs );
                 }
                 //   add_rhs ();
                 if ( display != 0 ) {
                     log.trace_production ( entry );
                 }
             } else {
                 new_token = error.no_entry ( symbol, token, level-1 );
             }
         } else {                                       // no table entry
             new_token = error.no_entry ( symbol, token, level-1 );
         }

     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = tokens.get();
             new_token = token;
         } else {
             new_token = error.mismatch ( symbol, token );
         }

     } else {
         if ( display != 0 ) {
             log.trace_action ( symbol );
         }
         action.execute ( -symbol );
     }

     if ( token != new_token ) {
         if ( new_token != 0 ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }

     symbol = (stack[top] != 0  ? stack[top++] : (short) 0);
     //   pop_current ();
 }

 if ( token != END_OF_SLK_INPUT_ ) {
     error.input_left ();
 }

}



};
