//----------------------------------//
//		SINTAXIS GENERAL		//
//----------------------------------//
UnidadDeCompilacion:
ModuloPrograma 
ModuloDefinicion 
ModuloImplementacion

ModuloPrograma:
CabeceraModulo Bloque Identificador . _action_FinDeModulo 

ModuloDefinicion:
CabeceraDefinicion { DefinicionDeModulo } END Identificador . _action_FinDeModulo

ModuloImplementacion:
IMPLEMENTATION ModuloPrograma

CabeceraModulo:
MODULE Identificador _action_ComienzoDeModulo [ Prioridad ] ; { ListaImportados ; }

CabeceraDefinicion:
DEFINITION MODULE Identificador _action_ComienzoDeModulo ; { ListaImportados ; } [ ListaExportados ; ]

ListaImportados:
[ FROM Identificador ] IMPORT IdentDeProc { , IdentDeProc }

ListaExportados:
EXPORT [ QUALIFIED ] ListaDeIdentificadores

Prioridad:
ExpresionConstante

Bloque:
ParteDeclarativa ParteEjecutiva END _action_finDeAmbito

DefinicionDeModulo:
DeclaracionDeConstantes
TYPE { Identificador [ = EsquemaDeTipo _action_DefinicionDeTipo ] ; }
DeclaracionDeVariables
CabeceraSubprograma ;

//----------------------------------------//
//		DECLARACIONES BASICAS	   	//
//----------------------------------------//
ParteDeclarativa:
{ Declaracion }

Declaracion:
DeclaracionDeConstantes
DeclaracionDeTipos
DeclaracionDeVariables
DeclaracionSubprograma
DeclaracionModulo

DeclaracionDeConstantes:
CONST { AsociacionConstante ; }

AsociacionConstante:
Identificador = ExpresionConstante _action_AsociacionConstante

DeclaracionDeTipos:
TYPE { DefinicionDeTipo ; }

DefinicionDeTipo:
Identificador = EsquemaDeTipo _action_DefinicionDeTipo

EsquemaDeTipo:
TipoSimple 
TipoConjunto
TipoFormacion
TipoRegistro
TipoPuntero
TipoSubprograma

TipoSimple:
TipoEnumerado
IdentificadorDeTipo RestoDeTipo 
\[ ExpresionConstante .. ExpresionConstante \] // Subrango

TipoEnumerado:
\( ListaDeIdentificadores \)

RestoDeTipo:
_epsilon_ // Simple
\[ ExpresionConstante .. ExpresionConstante \] // Subrango

TipoConjunto:
SET OF TipoSimple _action_TipoConjunto

TipoFormacion:
ARRAY TipoSimple { , TipoSimple } OF EsquemaDeTipo

TipoRegistro:
RECORD SecuenciaDeListasDeCampos END

SecuenciaDeListasDeCampos:
ListaDeCampos { ; ListaDeCampos }

ListaDeCampos:
_epsilon_
ListaDeIdentificadores : EsquemaDeTipo

TipoPuntero:
POINTER TO EsquemaDeTipo _action_TipoPuntero

TipoSubprograma:
PROCEDURE [ ListaDeTiposFormales ]

ListaDeTiposFormales:
( [ [ VAR ] TipoFormal { , [ VAR ] TipoFormal } ] ) RetornoSubprograma

RetornoSubprograma:
_epsilon_ 
: IdentificadorDeTipo

DeclaracionDeVariables:
VAR _action_ponerMarcaListaVariables { ListaDeVariables ; } _action_quitarMarcaListaVariables

ListaDeVariables:
ListaDeIdentificadores : EsquemaDeTipo _action_DeclaracionVariables 

DeclaracionSubprograma:
CabeceraSubprograma ; Bloque Identificador ; 

CabeceraSubprograma:
PROCEDURE Identificador _action_InicioDeclaracionProcedure [ ParametrosFormales ] 

ParametrosFormales:
( [ GrupoDeParametros { ; GrupoDeParametros } ] ) [ : IdentificadorDeTipo ] _action_CabeceraDeProcedure

GrupoDeParametros:
[ VAR ] ListaDeIdentificadores : TipoFormal

DeclaracionModulo:
MODULE Identificador _action_ComienzoDeModulo [ Prioridad ] ; { ListaImportados ; } [ ListaExportados ; ] Bloque Identificador ; _action_FinDeModulo

//----------------------------------------//
//		SENTENCIAS EJECUTABLES	   	//
//----------------------------------------//
ParteEjecutiva:
[ BEGIN SecuenciaDeSentencias ]

SecuenciaDeSentencias:
Sentencia { ; Sentencia _action_SecuenciaDeSentencias2 } _action_SecuenciaDeSentencias

Sentencia:
_epsilon_
SentenciaAsignacion
SentenciaIF
SentenciaCASE
SentenciaWHILE
SentenciaREPEAT
SentenciaLOOP
SentenciaFOR
SentenciaWITH
LlamadaProcedimientoPredefinido
SentenciaRETURN
EXIT

SentenciaAsignacion:
Identificador RestoSentenciaAsignacion _action_SentenciaAsignacion

RestoSentenciaAsignacion:
ParteIzquierda RestoSentenciaRestoAsignacion _action_RestoSentenciaAsignacion

RestoSentenciaRestoAsignacion:
_epsilon_
:= Expresion 
ParametrosDeLlamada

ParteIzquierda:
_epsilon_
\[ ListaDeExpresiones \] ParteIzquierda
. IdentificadorOProcPredef ParteIzquierda
^ ParteIzquierda

IdentificadorOProcPredef:
Identificador _action_IdentificadorOProcPredef_Ident
LlamadaProcedimientoPredefinido _action_IdentificadorOProcPredef_ProcPredef

SentenciaIF:
IF Expresion _action_ExpresionIF THEN SecuenciaDeSentencias RestoSentenciaIF END _action_SentenciaIF

RestoSentenciaIF:
{ ELSIF Expresion _action_ExpresionELSIF THEN SecuenciaDeSentencias _action_RestoSentenciaELSIF } [ ELSE SecuenciaDeSentencias _action_RestoSentenciaELSE ] _action_RestoSentenciaIF

SentenciaCASE:
CASE Expresion OF Caso { | Caso } [ ELSE SecuenciaDeSentencias ] END

Caso:
ListaDeValores : SecuenciaDeSentencias

SentenciaWHILE:
WHILE Expresion _action_ExpresionWHILE DO SecuenciaDeSentencias END _action_SentenciaWHILE

SentenciaREPEAT:
REPEAT SecuenciaDeSentencias UNTIL Expresion _action_ExpresionREPEAT _action_SentenciaREPEAT

SentenciaLOOP:
LOOP SecuenciaDeSentencias END _action_SentenciaLOOP

SentenciaFOR:
FOR Identificador := Expresion _action_IdentificadorFOR TO Expresion _action_ExpresionTO [ BY ExpresionConstante _action_ExpresionConstanteFOR ] DO SecuenciaDeSentencias END _action_SentenciaFOR

SentenciaWITH:
WITH Identificador ParteIzquierda DO SecuenciaDeSentencias END 

SentenciaRETURN:
RETURN [ Expresion ] 

//----------------------------------//
//		EXPRESIONES			//
//----------------------------------//
ListaDeValores:
Valores RestoListaValores 

RestoListaValores:
_epsilon_ 
, Valores RestoListaValores 

Valores:
ExpresionConstante RestoValores

RestoValores:
_epsilon_
.. ExpresionConstante

ExpresionConstante:
ExpresionConstanteSimple [ OperadorComparador ExpresionConstanteSimple ]

ExpresionConstanteSimple:
Signo TerminoConstante { OperadorSumador TerminoConstante }

TerminoConstante:
FactorConstante { OperadorMultiplicador FactorConstante }

FactorConstante:
Identificador 
ConstantePredefinida
Numero
Cadena _action_Cadena
Caracter _action_Caracter
( ExpresionConstante )
OperadorUnario FactorConstante

ParametrosDeLlamada:
( [ ListaDeExpresiones ] )

ListaDeExpresiones:
Expresion RestoListaDeExpresiones

RestoListaDeExpresiones:
_epsilon_
, Expresion RestoListaDeExpresiones

Expresion:
ExpresionSimple RestoExpresion 

RestoExpresion:
_epsilon_
OperadorComparador ExpresionSimple 

ExpresionSimple:
Signo Termino RestoExpresionSimple 

RestoExpresionSimple:
_epsilon_ 
OperadorSumador Termino _action_expresionSinParentesisDeSuma RestoExpresionSimple

Signo:
_epsilon_
+ _action_operadorUnario
- _action_operadorUnario

Termino:
Factor RestoTermino

RestoTermino:
_epsilon_
OperadorMultiplicador Factor RestoTermino _action_expresionSinParentesisDeMultiplicacion

Factor:
Identificador RestoFactor
ConstantePredefinida
Numero 
TipoPredefinido \{ ListaDeElementos \}
Cadena _action_Cadena
Caracter _action_Caracter
( Expresion )
OperadorUnario Factor
LlamadaFuncionPredefinida

RestoFactor:
\{ ListaDeElementos \}
ParametrosDeLlamada
ParteIzquierda

OperadorComparador:
= _action_OperadorBooleano
<>  _action_OperadorBooleano
#  _action_OperadorBooleano
<  _action_OperadorBooleano
<=  _action_OperadorBooleano
>  _action_OperadorBooleano
>=  _action_OperadorBooleano
IN 

OperadorSumador:
+ 
- 
OR 

OperadorMultiplicador:
* 
/ 
DIV 
MOD 
& 
AND 

OperadorUnario:
NOT _action_operadorUnario
~ _action_operadorUnario

//----------------------------//
//	ELEMENTOS BASICOS		//
//----------------------------//
TipoFormal:
[ ARRAY OF ] IdentificadorDeTipo

Numero:
NumeroEntero _action_NumeroEntero
NumeroReal _action_NumeroReal

ListaDeElementos:
[ Elementos { , Elementos } ]

Elementos:
ExpresionConstante [ .. ExpresionConstante ]

// TIPOS
IdentificadorDeTipo:
TipoPredefinido 
Identificador _action_TipoPredefinidoPorUsuario

TipoPredefinido:
BITSET _action_BITSET
BOOLEAN _action_BOOLEAN
CARDINAL _action_CARDINAL
CHAR _action_CHAR
INTEGER _action_INTEGER
LONGINT _action_LONGINT
LONGREAL _action_LONGREAL
PROC _action_PROC
REAL _action_REAL

// CONSTANTES
ConstantePredefinida:
TRUE _action_TRUE
FALSE _action_FALSE
NIL _action_NIL

ListaDeIdentificadores:
Identificador RestoListaIdentificadores

RestoListaIdentificadores:
_epsilon_ 
, Identificador RestoListaIdentificadores

//----------------------------------------------------------------------------------//
//		IMPORTACIONES DE PROCEDIMIENTOS Y FUNCIONES PREDEFINIDAS			//
//----------------------------------------------------------------------------------//
// Los procedimientos predefinidos del lenguaje no se importan
IdentDeProc:
Identificador
IdentDeProcPredef

IdentDeProcPredef:
ALLOCATE
DEALLOCATE
ReadInt
WriteInt
ReadCard
WriteCard
ReadChar
WriteChar
ReadString
WriteString
ReadReal
WriteReal
WriteLn

//----------------------------------------------------------------------//
//		LLAMADA DE PROCEDIMIENTOS Y FUNCIONES PREDEFINIDAS		//
//----------------------------------------------------------------------//
LlamadaProcedimientoPredefinido:
DEC ( Expresion [ , Expresion ] )
INC ( Expresion [ , Expresion ] )
INCL ( Expresion , Expresion )
EXCL ( Expresion , Expresion )
NEW ( Expresion )
DISPOSE ( Expresion )
ReadInt ( Expresion )
WriteInt ( Expresion , Expresion )
ReadCard ( Expresion )
WriteCard ( Expresion , Expresion )
ReadChar ( Expresion )
WriteChar (  Expresion )
ReadString ( Expresion )
WriteString ( Expresion )
ReadReal ( Expresion )
WriteReal ( Expresion , Expresion [ , Expresion ] )
WriteLn
HALT

LlamadaFuncionPredefinida:
ABS ( Expresion )
CAP ( ParametroChar )
CHR ( Expresion )
FLOAT ( Expresion )
HIGH ( Expresion )
MAX ( IdentificadorDeTipo )
MIN ( IdentificadorDeTipo )
ODD ( Expresion )
ORD ( Expresion )
SIZE ( IdentificadorDeTipo )
TRUNC ( Expresion )
VAL ( IdentificadorDeTipo , Expresion )
